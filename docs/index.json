{
  "api/RetroAesthetics.CombineMeshes.html": {
    "href": "api/RetroAesthetics.CombineMeshes.html",
    "title": "Class CombineMeshes | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class CombineMeshes Namespace RetroAesthetics Assembly Assembly-CSharp.dll [ExecuteInEditMode] public class CombineMeshes : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CombineMeshes Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields combineChildMeshes [InspectorButton(\"CombineButtonHandler\")] public bool combineChildMeshes Field Value bool Methods CombineChildMeshes() public virtual void CombineChildMeshes()"
  },
  "api/RetroAesthetics.RetroCameraEffect.GlitchDirections.html": {
    "href": "api/RetroAesthetics.RetroCameraEffect.GlitchDirections.html",
    "title": "Enum RetroCameraEffect.GlitchDirections | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum RetroCameraEffect.GlitchDirections Namespace RetroAesthetics Assembly Assembly-CSharp.dll public enum RetroCameraEffect.GlitchDirections Fields Both = 3 Horizontal = 2 None = 0 Vertical = 1"
  },
  "api/RetroAesthetics.RetroCameraEffect.html": {
    "href": "api/RetroAesthetics.RetroCameraEffect.html",
    "title": "Class RetroCameraEffect | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class RetroCameraEffect Namespace RetroAesthetics Assembly Assembly-CSharp.dll [ExecuteInEditMode] [RequireComponent(typeof(Camera))] public class RetroCameraEffect : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour RetroCameraEffect Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields _material [HideInInspector] public Material _material Field Value Material bottomHeight [Range(0, 0.5)] public float bottomHeight Field Value float bottomIntensity [Range(0, 3)] public float bottomIntensity Field Value float chromaticAberration [SerializeField] [Range(0, 50)] public float chromaticAberration Field Value float displacementAmplitude [SerializeField] [Range(0, 5)] public float displacementAmplitude Field Value float displacementFrequency [SerializeField] [Range(10, 150)] public float displacementFrequency Field Value float displacementSpeed [SerializeField] [Range(0, 5)] public float displacementSpeed Field Value float gammaScale [Space] public float gammaScale Field Value float glitchFrequency [SerializeField] [Range(0, 100)] public int glitchFrequency Field Value int glitchIntensity [SerializeField] [Range(0, 2.5)] public float glitchIntensity Field Value float noiseTexture [Tooltip(\"Static noise texture. White regions represent noise.\")] public Texture noiseTexture Field Value Texture radialCurvature public float radialCurvature Field Value float radialIntensity public float radialIntensity Field Value float randomGlitches [Space] public RetroCameraEffect.GlitchDirections randomGlitches Field Value RetroCameraEffect.GlitchDirections scanlineIntensity [Range(0, 1)] public float scanlineIntensity Field Value float scanlineSize public float scanlineSize Field Value float staticIntensity [SerializeField] [Range(0, 2.5)] [Tooltip(\"Amount of TV noise to blend into the output.\")] public float staticIntensity Field Value float useBottomNoise [Space] public bool useBottomNoise Field Value bool useBottomStretch public bool useBottomStretch Field Value bool useChromaticAberration [Space] public bool useChromaticAberration Field Value bool useDisplacementWaves [Space] public bool useDisplacementWaves Field Value bool useRadialDistortion [Space] public bool useRadialDistortion Field Value bool useScanlines [Space] public bool useScanlines Field Value bool useStaticNoise [Tooltip(\"If enabled, simulated TV noise is added to the output.\")] public bool useStaticNoise Field Value bool useVignette [Space] public bool useVignette Field Value bool vignette [SerializeField] [Range(0, 1)] public float vignette Field Value float Methods FadeIn(float, Action) public virtual void FadeIn(float speed = 1, Action callback = null) Parameters speed float callback Action FadeOut(float, Action) public virtual void FadeOut(float speed = 1, Action callback = null) Parameters speed float callback Action Glitch(float) public virtual void Glitch(float amount = 1) Parameters amount float OnRenderImage(RenderTexture, RenderTexture) public void OnRenderImage(RenderTexture source, RenderTexture destination) Parameters source RenderTexture destination RenderTexture"
  },
  "api/RetroAesthetics.SceneField.html": {
    "href": "api/RetroAesthetics.SceneField.html",
    "title": "Class SceneField | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class SceneField Namespace RetroAesthetics Assembly Assembly-CSharp.dll [Serializable] public class SceneField Inheritance object SceneField Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SceneName public string SceneName { get; } Property Value string Operators implicit operator string(SceneField) public static implicit operator string(SceneField sceneField) Parameters sceneField SceneField Returns string"
  },
  "api/RetroAesthetics.UVScroller.html": {
    "href": "api/RetroAesthetics.UVScroller.html",
    "title": "Class UVScroller | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class UVScroller Namespace RetroAesthetics Assembly Assembly-CSharp.dll public class UVScroller : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UVScroller Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields scrollSpeed public Vector2 scrollSpeed Field Value Vector2 textureName public string textureName Field Value string"
  },
  "api/RetroAesthetics.html": {
    "href": "api/RetroAesthetics.html",
    "title": "Namespace RetroAesthetics | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace RetroAesthetics Classes CombineMeshes RetroCameraEffect SceneField UVScroller Enums RetroCameraEffect.GlitchDirections"
  },
  "api/WGR.AI.Entities.AIEntity.html": {
    "href": "api/WGR.AI.Entities.AIEntity.html",
    "title": "Class AIEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntity Namespace WGR.AI.Entities Assembly Assembly-CSharp.dll public abstract class AIEntity : Entity, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity AIEntity Implements IInteractable Derived BossEntity EnemyEntity Inherited Members Entity.entityName Entity.entityLife Entity.AttackInteraction() Entity.StunInteraction() Fields agent protected NavMeshAgent agent Field Value NavMeshAgent aiEntityWeapon protected AIEntityWeapon aiEntityWeapon Field Value AIEntityWeapon attackTarget protected Transform attackTarget Field Value Transform enemyRB protected Rigidbody enemyRB Field Value Rigidbody fovManager protected AIEntityFOVManager fovManager Field Value AIEntityFOVManager isAgentActive protected bool isAgentActive Field Value bool layerOnDeath protected EnemyLayer layerOnDeath Field Value EnemyLayer occlusionLayers public LayerMask occlusionLayers Field Value LayerMask Properties AIEntityWeapon public AIEntityWeapon AIEntityWeapon { get; protected set; } Property Value AIEntityWeapon FOVManager public AIEntityFOVManager FOVManager { get; protected set; } Property Value AIEntityFOVManager Methods CacheComponents() Call to cache the necessary entity components. protected abstract void CacheComponents() CheckIfDead() protected abstract bool CheckIfDead() Returns bool CreateBTHandler() protected abstract void CreateBTHandler() CreateNodeData() protected abstract void CreateNodeData() GetAgent() public abstract NavMeshAgent GetAgent() Returns NavMeshAgent GetEntityNodeData() public abstract INodeData GetEntityNodeData() Returns INodeData GetIsAgentActive() public abstract bool GetIsAgentActive() Returns bool GetIsDead() public abstract bool GetIsDead() Returns bool OnObserverDeath() public void OnObserverDeath() OnPlayerFound() public void OnPlayerFound() SetAttackTarget(Transform) public abstract void SetAttackTarget(Transform target) Parameters target Transform SetHealth(float) protected abstract void SetHealth(float value) Parameters value float SetIsAgentActive(bool) public abstract void SetIsAgentActive(bool value) Parameters value bool SetupNodeDataFields() protected abstract void SetupNodeDataFields() TargetFound() protected abstract void TargetFound() Events onObserverDeath public event Action onObserverDeath Event Type Action onPlayerFound public event Action onPlayerFound Event Type Action"
  },
  "api/WGR.AI.Entities.AIEntityAnimations.html": {
    "href": "api/WGR.AI.Entities.AIEntityAnimations.html",
    "title": "Class AIEntityAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityAnimations Namespace WGR.AI.Entities Assembly Assembly-CSharp.dll public abstract class AIEntityAnimations : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AIEntityAnimations Derived BossAnimations EnemyAnimations Methods GetAnimator() Call to get THIS AI entity animator reference. public abstract Animator GetAnimator() Returns Animator SetAnimatorPlaybackSpeed(float) Call to set THIS animators' playback speed to the passed value. public abstract void SetAnimatorPlaybackSpeed(float value) Parameters value float"
  },
  "api/WGR.AI.Entities.AIEntityBTHandler.html": {
    "href": "api/WGR.AI.Entities.AIEntityBTHandler.html",
    "title": "Class AIEntityBTHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityBTHandler Namespace WGR.AI.Entities Assembly Assembly-CSharp.dll public abstract class AIEntityBTHandler Inheritance object AIEntityBTHandler Derived BossBTHandler EnemyBTHandler Methods CreateBehaviourTree() Call to start this agents' Behaviour Tree creation. protected abstract void CreateBehaviourTree() UpdateBT() Call to update the agent Behaviour Tree from its root. public abstract void UpdateBT()"
  },
  "api/WGR.AI.Entities.EnemyLayer.html": {
    "href": "api/WGR.AI.Entities.EnemyLayer.html",
    "title": "Enum EnemyLayer | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum EnemyLayer Namespace WGR.AI.Entities Assembly Assembly-CSharp.dll All the available gameObject layers the enemy AI can exist on. public enum EnemyLayer Fields Enemy = 7 NonInteractive = 31"
  },
  "api/WGR.AI.Entities.Hostile.AIEntityWeapon.html": {
    "href": "api/WGR.AI.Entities.Hostile.AIEntityWeapon.html",
    "title": "Class AIEntityWeapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityWeapon Namespace WGR.AI.Entities.Hostile Assembly Assembly-CSharp.dll public abstract class AIEntityWeapon : Shooter, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter AIEntityWeapon Implements IShooter Derived BossWeapon EnemyWeapon Inherited Members Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Fields burstTimerCache protected float burstTimerCache Field Value float enemyWeaponRenderer protected SpriteRenderer enemyWeaponRenderer Field Value SpriteRenderer onCooldown protected bool onCooldown Field Value bool projectilePerShotCache protected int projectilePerShotCache Field Value int projectilesPerShot protected int projectilesPerShot Field Value int shotBurstTimer protected float shotBurstTimer Field Value float shotCooldownInterval protected float shotCooldownInterval Field Value float totalBulletSpread protected float totalBulletSpread Field Value float Methods CanShoot() protected abstract bool CanShoot() Returns bool ClearWeaponSprite() Call to set the weaponSprite to null public abstract void ClearWeaponSprite() DecreaseSpread() Call to decrease totalBulletSpread by accuracyIncreaseRate protected abstract void DecreaseSpread() GetAIEntity() Call to get the AIEntity of THIS EnemyWeapon script. public abstract AIEntity GetAIEntity() Returns AIEntity GetFirepointTransform() Call to get the firePoint transform of THIS enemy. public abstract Transform GetFirepointTransform() Returns Transform GetWeaponRange() Call to get the equipedWeapon minimum shoot distance. public abstract float GetWeaponRange() Returns float OnShootReset() Call to reset the shooting specific variables (shootDoneTime + canShoot) protected abstract void OnShootReset() SetIsShooting(bool) Call to set isShooting to the passed value public abstract void SetIsShooting(bool value) Parameters value bool bool state SetStartDefaults() Called in start to set weapon management defaults. protected abstract void SetStartDefaults() SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public override abstract void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public override abstract void Shoot() ShootSequence() public abstract void ShootSequence() TypeBasedAttack() Call to initiate an attack sequence based on the equiped weapon WeaponCategory protected abstract void TypeBasedAttack()"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BossAnimations.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BossAnimations.html",
    "title": "Class BossAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossAnimations Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll public class BossAnimations : AIEntityAnimations Inheritance object Object Component Behaviour MonoBehaviour AIEntityAnimations BossAnimations Methods GetAnimator() Call to get THIS AI entity animator reference. public override Animator GetAnimator() Returns Animator PlayDeathAnimation() Call to play the death animation of the boss entity. public void PlayDeathAnimation() SetAnimatorPlaybackSpeed(float) Call to set THIS animators' playback speed to the passed value. public override void SetAnimatorPlaybackSpeed(float value) Parameters value float SetIsIdleState(bool) Call to set the idle animation state of the boss entity. public void SetIsIdleState(bool state) Parameters state bool"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BossBTHandler.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BossBTHandler.html",
    "title": "Class BossBTHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossBTHandler Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll public class BossBTHandler : AIEntityBTHandler Inheritance object AIEntityBTHandler BossBTHandler Constructors BossBTHandler(BossNodeData, BossEntity) public BossBTHandler(BossNodeData bossNodeData, BossEntity bossEntity) Parameters bossNodeData BossNodeData bossEntity BossEntity Fields bossNodeData public BossNodeData bossNodeData Field Value BossNodeData Methods CreateBehaviourTree() Call to start this agents' Behaviour Tree creation. protected override void CreateBehaviourTree() UpdateBT() Call to update the agent Behaviour Tree from its root. public override void UpdateBT()"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BossEntity.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BossEntity.html",
    "title": "Class BossEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossEntity Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll public class BossEntity : AIEntity, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity AIEntity BossEntity Implements IInteractable Inherited Members AIEntity.occlusionLayers AIEntity.layerOnDeath AIEntity.isAgentActive AIEntity.attackTarget AIEntity.enemyRB AIEntity.agent AIEntity.fovManager AIEntity.FOVManager AIEntity.aiEntityWeapon AIEntity.AIEntityWeapon AIEntity.onPlayerFound AIEntity.OnPlayerFound() AIEntity.onObserverDeath AIEntity.OnObserverDeath() Entity.entityName Entity.entityLife Properties BossAnimations public BossAnimations BossAnimations { get; } Property Value BossAnimations IsDead public bool IsDead { get; set; } Property Value bool Methods AttackInteraction() Call to decrease the boss health by one and increase his boss phase to the next phase. Moves the boss to his next phase hiding room and freezes the player. If the boss is stunned and gets attacked the bad ending sequence gets initiated. All enemies are killed if the boss enters his stunned state. public override void AttackInteraction() CacheComponents() Call to cache the necessary entity components. protected override void CacheComponents() CheckIfDead() Call to check the entity life value. protected override bool CheckIfDead() Returns bool True if entityLife is smaller than 0, false otherwise. CreateBTHandler() Call to create an instance of BossBTHandler and assign it to the btHandler varable. protected override void CreateBTHandler() CreateNodeData() Call to create the behaviour tree data container for THIS enemy entity. Creates a new BossNodeData instance and assigns it in the bossNodeData variable. protected override void CreateNodeData() EnableBossEntryAttacking() Call to enable the boss attack behvaiour. public void EnableBossEntryAttacking() GetAgent() Call to get the NavMeshAgent component reference. public override NavMeshAgent GetAgent() Returns NavMeshAgent GetEntityNodeData() Call to get the node data of THIS entity. public override INodeData GetEntityNodeData() Returns INodeData GetIsAgentActive() Call to get the agents' current state. public override bool GetIsAgentActive() Returns bool GetIsDead() Call to get the agents' is dead value. public override bool GetIsDead() Returns bool OnBossStunEnd() Call to disable the boss behaviour and invoke the: GameEventHandler.OnBossStunnedPhase event GameSoundsHandler.ForcePlayBossStunnedMusic method. public void OnBossStunEnd() SetAttackTarget(Transform) Called from the EnemyEntityManager at startup to update the target of THIS enemy. public override void SetAttackTarget(Transform target) Parameters target Transform SetHealth(float) Call to set the entityLife to the passed value. protected override void SetHealth(float value) Parameters value float SetIsAgentActive(bool) Call to set the agent is active to the passed value. public override void SetIsAgentActive(bool value) Parameters value bool SetupNodeDataFields() Call to set up the needed node data fields for correct startup agent behaviour. protected override void SetupNodeDataFields() StunInteraction() Boss is not stunable, nothing happens. Call to play a punch SFX. public override void StunInteraction() TargetFound() Call to set the agent node data target found value to true. protected override void TargetFound()"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BossEntrySequence.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BossEntrySequence.html",
    "title": "Class BossEntrySequence | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossEntrySequence Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll public class BossEntrySequence : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BossEntrySequence"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BossPhase.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BossPhase.html",
    "title": "Enum BossPhase | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum BossPhase Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll All the available boss phases. public enum BossPhase Fields BedroomPhase = 2 BudhaRoomPhase = 1 StartingPhase = 0 StunnedPhase = 3"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BossWeapon.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BossWeapon.html",
    "title": "Class BossWeapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossWeapon Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll public class BossWeapon : AIEntityWeapon, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter AIEntityWeapon BossWeapon Implements IShooter Inherited Members AIEntityWeapon.projectilesPerShot AIEntityWeapon.shotCooldownInterval AIEntityWeapon.enemyWeaponRenderer AIEntityWeapon.onCooldown AIEntityWeapon.shotBurstTimer AIEntityWeapon.burstTimerCache AIEntityWeapon.projectilePerShotCache AIEntityWeapon.totalBulletSpread Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Methods CanShoot() Call to check if the boss can shoot his next bullet again. protected override bool CanShoot() Returns bool ClearWeaponSprite() Call to set the weaponSprite to null public override void ClearWeaponSprite() DecreaseSpread() Call to decrease totalBulletSpread by accuracyIncreaseRate protected override void DecreaseSpread() GetAIEntity() Call to get the AIEntity of THIS EnemyWeapon script. public override AIEntity GetAIEntity() Returns AIEntity GetFirepointTransform() Call to get the firePoint transform of THIS enemy. public override Transform GetFirepointTransform() Returns Transform GetWeaponRange() Call to get the equipedWeapon minimum shoot distance. public override float GetWeaponRange() Returns float OnShootReset() Call to reset the shooting specific variables (shootDoneTime + canShoot) protected override void OnShootReset() SetIsShooting(bool) Call to set isShooting to the passed value public override void SetIsShooting(bool value) Parameters value bool bool state SetStartDefaults() Call to set the default attacking values. protected override void SetStartDefaults() SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public override void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public override void Shoot() ShootSequence() Call to initiate the Boss Shoot sequence. Acts as an update too when called from the enemyBT .Run() public override void ShootSequence() TypeBasedAttack() Call to initiate an attack sequence based on the equiped weapon WeaponCategory protected override void TypeBasedAttack()"
  },
  "api/WGR.AI.Entities.Hostile.Boss.BulletDetector.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.BulletDetector.html",
    "title": "Class BulletDetector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BulletDetector Namespace WGR.AI.Entities.Hostile.Boss Assembly Assembly-CSharp.dll public class BulletDetector : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BulletDetector Fields IsActive public bool IsActive Field Value bool"
  },
  "api/WGR.AI.Entities.Hostile.Boss.html": {
    "href": "api/WGR.AI.Entities.Hostile.Boss.html",
    "title": "Namespace WGR.AI.Entities.Hostile.Boss | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.AI.Entities.Hostile.Boss Classes BossAnimations BossBTHandler BossEntity BossEntrySequence BossWeapon BulletDetector Enums BossPhase All the available boss phases."
  },
  "api/WGR.AI.Entities.Hostile.Generic.EnemyAnimations.html": {
    "href": "api/WGR.AI.Entities.Hostile.Generic.EnemyAnimations.html",
    "title": "Class EnemyAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyAnimations Namespace WGR.AI.Entities.Hostile.Generic Assembly Assembly-CSharp.dll public class EnemyAnimations : AIEntityAnimations Inheritance object Object Component Behaviour MonoBehaviour AIEntityAnimations EnemyAnimations Methods GetAnimator() Call to get THIS AI entity animator reference. public override Animator GetAnimator() Returns Animator PlayDeathAnimation() Call to play the death animation. public void PlayDeathAnimation() PlayMeleeAnimation(WeaponType) Plays the corresponding melee animation based on weapon type passed. public void PlayMeleeAnimation(WeaponType weaponType) Parameters weaponType WeaponType SetAnimatorPlaybackSpeed(float) Call to set THIS animators' playback speed to the passed value. public override void SetAnimatorPlaybackSpeed(float value) Parameters value float SetHoldingRangedWeaponState(bool) Call to activate the universal weapon holding stance of the enemy. public void SetHoldingRangedWeaponState(bool state) Parameters state bool SetStunnedAnimationState(bool) Call to play the stunned agent animation. public void SetStunnedAnimationState(bool state) Parameters state bool SetWalkStateAnimation(bool) Call to set the walking animation acitve state. public void SetWalkStateAnimation(bool state) Parameters state bool"
  },
  "api/WGR.AI.Entities.Hostile.Generic.EnemyBTHandler.html": {
    "href": "api/WGR.AI.Entities.Hostile.Generic.EnemyBTHandler.html",
    "title": "Class EnemyBTHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyBTHandler Namespace WGR.AI.Entities.Hostile.Generic Assembly Assembly-CSharp.dll public class EnemyBTHandler : AIEntityBTHandler Inheritance object AIEntityBTHandler EnemyBTHandler Constructors EnemyBTHandler(EnemyNodeData, EnemyEntity) public EnemyBTHandler(EnemyNodeData nodeData, EnemyEntity enemyEntity) Parameters nodeData EnemyNodeData enemyEntity EnemyEntity Fields nodeData public EnemyNodeData nodeData Field Value EnemyNodeData Methods CreateBehaviourTree() Call to start this agents' Behaviour Tree creation. protected override void CreateBehaviourTree() UpdateBT() Call to update the agent Behaviour Tree from its root. public override void UpdateBT()"
  },
  "api/WGR.AI.Entities.Hostile.Generic.EnemyEntity.html": {
    "href": "api/WGR.AI.Entities.Hostile.Generic.EnemyEntity.html",
    "title": "Class EnemyEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyEntity Namespace WGR.AI.Entities.Hostile.Generic Assembly Assembly-CSharp.dll public class EnemyEntity : AIEntity, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity AIEntity EnemyEntity Implements IInteractable Inherited Members AIEntity.occlusionLayers AIEntity.layerOnDeath AIEntity.isAgentActive AIEntity.attackTarget AIEntity.enemyRB AIEntity.agent AIEntity.fovManager AIEntity.FOVManager AIEntity.aiEntityWeapon AIEntity.AIEntityWeapon AIEntity.onPlayerFound AIEntity.OnPlayerFound() AIEntity.onObserverDeath AIEntity.OnObserverDeath() Entity.entityName Entity.entityLife Properties EnemyAnimation public EnemyAnimations EnemyAnimation { get; } Property Value EnemyAnimations IsDead When set, IsDead automatically updates the enemyNodeData equivalent field with the passed value. If the value passed is true, instatiates a blood pool VFX. If the value passed is true AND the focused scene is the BOSS FIGHT, calls the GameEventHandler.OnBossLevelEnemyDeath event. public bool IsDead { get; set; } Property Value bool IsStunned public bool IsStunned { get; set; } Property Value bool Methods AttackInteraction() If the agent has armor, decrease its armor value by 1. If the agent ahs no armor left, decrease its life value by 1. Early return if the enemy is dead OR inactive. Calls CheckIfDead(), if true then calls InitiateDeathSequence(). public override void AttackInteraction() CacheComponents() Call to cache the necessary entity components. protected override void CacheComponents() CheckIfDead() Call to check the entity life value. protected override bool CheckIfDead() Returns bool True if entityLife is smaller than 0, false otherwise. CreateBTHandler() Call to create an instance of EnemyBTHandler and assign it to the btHandler varable. protected override void CreateBTHandler() CreateNodeData() Call to create the behaviour tree data container for THIS enemy entity. Creates a new EnemyNodeData instance and assigns it in the enemyNodeData variable. protected override void CreateNodeData() DisableShootingBehaviour() Call to set the enemyNodeData canShoot to false. public void DisableShootingBehaviour() GetAgent() Call to get the NavMeshAgent component reference. public override NavMeshAgent GetAgent() Returns NavMeshAgent GetEntityNodeData() Call to get the node data of THIS entity. public override INodeData GetEntityNodeData() Returns INodeData GetIsAgentActive() Call to get the agents' current state. public override bool GetIsAgentActive() Returns bool GetIsDead() Call to get the agents' is dead value. public override bool GetIsDead() Returns bool OnPlayerAbilityFinish() Called from each ability when the ability behaviour has finished executing to reset the agent values. public void OnPlayerAbilityFinish() OnPlayerAbilityStart(float) Call to set the animator playback speed to the passed value. public void OnPlayerAbilityStart(float animatorPlaybackSpeed) Parameters animatorPlaybackSpeed float SetAttackTarget(Transform) Called from the EnemyEntityManager at startup to update the target of THIS enemy. public override void SetAttackTarget(Transform target) Parameters target Transform SetHealth(float) Call to set the entityLife to the passed value. protected override void SetHealth(float value) Parameters value float SetIsAgentActive(bool) Call to set the agent is active to the passed value. public override void SetIsAgentActive(bool value) Parameters value bool SetupNodeDataFields() Call to set up the needed node data fields for correct startup agent behaviour. protected override void SetupNodeDataFields() StunInteraction() Call to play the the stunned agent animation. Set is stunned to true. Play the Punch SFX. public override void StunInteraction() TargetFound() Call to set the agent node data target found value to true. protected override void TargetFound()"
  },
  "api/WGR.AI.Entities.Hostile.Generic.EnemyWeapon.html": {
    "href": "api/WGR.AI.Entities.Hostile.Generic.EnemyWeapon.html",
    "title": "Class EnemyWeapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyWeapon Namespace WGR.AI.Entities.Hostile.Generic Assembly Assembly-CSharp.dll public class EnemyWeapon : AIEntityWeapon, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter AIEntityWeapon EnemyWeapon Implements IShooter Inherited Members AIEntityWeapon.projectilesPerShot AIEntityWeapon.shotCooldownInterval AIEntityWeapon.enemyWeaponRenderer AIEntityWeapon.onCooldown AIEntityWeapon.shotBurstTimer AIEntityWeapon.burstTimerCache AIEntityWeapon.projectilePerShotCache AIEntityWeapon.totalBulletSpread Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Methods CanShoot() Call to check if the enemy can shoot his next bullet again. protected override bool CanShoot() Returns bool ClearWeaponSprite() Call to set the weaponSprite to null public override void ClearWeaponSprite() DecreaseSpread() Call to decrease totalBulletSpread by accuracyIncreaseRate protected override void DecreaseSpread() GetAIEntity() Call to get the AIEntity of THIS EnemyWeapon script. public override AIEntity GetAIEntity() Returns AIEntity GetFirepointTransform() Call to get the firePoint transform of THIS enemy. public override Transform GetFirepointTransform() Returns Transform GetWeaponRange() Call to get the equipedWeapon minimum shoot distance. public override float GetWeaponRange() Returns float OnShootReset() Call to reset the shooting specific variables (shootDoneTime + canShoot) protected override void OnShootReset() SetIsShooting(bool) Call to set isShooting to the passed value public override void SetIsShooting(bool value) Parameters value bool bool state SetStartDefaults() Call to set the required startup default field values. protected override void SetStartDefaults() SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public override void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public override void Shoot() ShootSequence() Call to initiate the Enemy Shoot sequence. Acts as an update too when called from the enemyBT .Run() public override void ShootSequence() TypeBasedAttack() Call to initiate an attack sequence based on the equiped weapon WeaponCategory protected override void TypeBasedAttack()"
  },
  "api/WGR.AI.Entities.Hostile.Generic.html": {
    "href": "api/WGR.AI.Entities.Hostile.Generic.html",
    "title": "Namespace WGR.AI.Entities.Hostile.Generic | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.AI.Entities.Hostile.Generic Classes EnemyAnimations EnemyBTHandler EnemyEntity EnemyWeapon"
  },
  "api/WGR.AI.Entities.Hostile.html": {
    "href": "api/WGR.AI.Entities.Hostile.html",
    "title": "Namespace WGR.AI.Entities.Hostile | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.AI.Entities.Hostile Classes AIEntityWeapon"
  },
  "api/WGR.AI.Entities.html": {
    "href": "api/WGR.AI.Entities.html",
    "title": "Namespace WGR.AI.Entities | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.AI.Entities Classes AIEntity AIEntityAnimations AIEntityBTHandler Enums EnemyLayer All the available gameObject layers the enemy AI can exist on."
  },
  "api/WGR.AI.FOV.AIEntityFOVDetector.html": {
    "href": "api/WGR.AI.FOV.AIEntityFOVDetector.html",
    "title": "Class AIEntityFOVDetector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityFOVDetector Namespace WGR.AI.FOV Assembly Assembly-CSharp.dll public class AIEntityFOVDetector Inheritance object AIEntityFOVDetector Constructors AIEntityFOVDetector(AIEntityFOVManager, Transform, Color, Color, float, float, Vector3) Call to construct an AI Detector. public AIEntityFOVDetector(AIEntityFOVManager enemyFOVManager, Transform origin, Color radiusColor, Color frustrumColor, float maxAngle, float maxRadious, Vector3 rotation) Parameters enemyFOVManager AIEntityFOVManager This detectors' manager. origin Transform The center of the detector radiusColor Color The detectors' radius color. (Alpha set to 255f) frustrumColor Color The detectors' drustrum color. (Alpha set to 255f) maxAngle float The detectors' max frustrum angle (ie. 45 = 90 degrees.) maxRadious float The detectors' radius. rotation Vector3 The detector's facing direction. Methods IsEnabled(bool) Call to set the detector active state to the passed value. public void IsEnabled(bool state) Parameters state bool SetTarget(Transform) Call to set THIS detectors' target. public void SetTarget(Transform target) Parameters target Transform Update() public void Update()"
  },
  "api/WGR.AI.FOV.AIEntityFOVManager.html": {
    "href": "api/WGR.AI.FOV.AIEntityFOVManager.html",
    "title": "Class AIEntityFOVManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityFOVManager Namespace WGR.AI.FOV Assembly Assembly-CSharp.dll public class AIEntityFOVManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AIEntityFOVManager Properties IsDetectorActive public bool IsDetectorActive { get; } Property Value bool Methods ActivateAllDetectors() Call to mark every Entity detector of THIS gameObject as active. If the enemy AI is marked as dead, then returns. public void ActivateAllDetectors() DeactivateAllDetectors() Call to mark every Entity detector of THIS gameObject as inactive. public void DeactivateAllDetectors() GetEnemyEntity() Call to get THIS FOV managers' enemy entity. public AIEntity GetEnemyEntity() Returns AIEntity"
  },
  "api/WGR.AI.FOV.html": {
    "href": "api/WGR.AI.FOV.html",
    "title": "Namespace WGR.AI.FOV | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.AI.FOV Classes AIEntityFOVDetector AIEntityFOVManager"
  },
  "api/WGR.AI.Nodes.AttackTargetAction.html": {
    "href": "api/WGR.AI.Nodes.AttackTargetAction.html",
    "title": "Class AttackTargetAction | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AttackTargetAction Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class AttackTargetAction : INode Inheritance object AttackTargetAction Implements INode Constructors AttackTargetAction(INodeData, Action) public AttackTargetAction(INodeData nodeData, Action shootMethod) Parameters nodeData INodeData shootMethod Action Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to continuously rotate the agent towards the Target (through nodeData) and call its Action passed method. Always returns true. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.BehaviourTree.html": {
    "href": "api/WGR.AI.Nodes.BehaviourTree.html",
    "title": "Class BehaviourTree | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BehaviourTree Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class BehaviourTree : INode Inheritance object BehaviourTree Implements INode Constructors BehaviourTree(INode, INodeData) public BehaviourTree(INode root, INodeData nodeData) Parameters root INode nodeData INodeData Methods GetNodeData() Call to get the node data attached to THIS behaviou tree. public INodeData GetNodeData() Returns INodeData Run() Call to update the branches of the BT. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.BossNodeData.html": {
    "href": "api/WGR.AI.Nodes.BossNodeData.html",
    "title": "Class BossNodeData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossNodeData Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class BossNodeData : INodeData Inheritance object BossNodeData Implements INodeData Methods GetCanShoot() public bool GetCanShoot() Returns bool GetCurrentBossPhase() public BossPhase GetCurrentBossPhase() Returns BossPhase GetCurrentHideRoom() public Transform GetCurrentHideRoom() Returns Transform GetEnemyAnimations() public BossAnimations GetEnemyAnimations() Returns BossAnimations GetEnemyEntity() public BossEntity GetEnemyEntity() Returns BossEntity GetIsDead() public bool GetIsDead() Returns bool GetIsHiding() public bool GetIsHiding() Returns bool GetIsStunned() public bool GetIsStunned() Returns bool GetNavMeshAgent() public NavMeshAgent GetNavMeshAgent() Returns NavMeshAgent GetOcclusionLayers() public LayerMask GetOcclusionLayers() Returns LayerMask GetOriginalPos() public Vector3 GetOriginalPos() Returns Vector3 GetTarget() public Transform GetTarget() Returns Transform GetTargetFound() public bool GetTargetFound() Returns bool GetTargetIsDead() public bool GetTargetIsDead() Returns bool GetWeaponRange() public float GetWeaponRange() Returns float SetCanShoot(bool) public void SetCanShoot(bool value) Parameters value bool SetCurrentBossPhase(BossPhase) public void SetCurrentBossPhase(BossPhase bossPhase) Parameters bossPhase BossPhase SetCurrentHideRoom(Transform) public void SetCurrentHideRoom(Transform transform) Parameters transform Transform SetEnemyAnimations(BossAnimations) public void SetEnemyAnimations(BossAnimations value) Parameters value BossAnimations SetEnemyEntity(BossEntity) public void SetEnemyEntity(BossEntity value) Parameters value BossEntity SetIsDead(bool) public void SetIsDead(bool value) Parameters value bool SetIsHiding(bool) public void SetIsHiding(bool value) Parameters value bool SetIsStunned(bool) public void SetIsStunned(bool value) Parameters value bool SetNavMeshAgent(NavMeshAgent) public void SetNavMeshAgent(NavMeshAgent value) Parameters value NavMeshAgent SetOcclusionLayers(LayerMask) public void SetOcclusionLayers(LayerMask value) Parameters value LayerMask SetOriginalPos(Vector3) public void SetOriginalPos(Vector3 pos) Parameters pos Vector3 SetTarget(Transform) public void SetTarget(Transform value) Parameters value Transform SetTargetFound(bool) public void SetTargetFound(bool value) Parameters value bool SetTargetIsDead(bool) public void SetTargetIsDead(bool value) Parameters value bool SetWeaponRange(float) public void SetWeaponRange(float value) Parameters value float"
  },
  "api/WGR.AI.Nodes.BossPhaseSelector.html": {
    "href": "api/WGR.AI.Nodes.BossPhaseSelector.html",
    "title": "Class BossPhaseSelector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossPhaseSelector Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class BossPhaseSelector : INode Inheritance object BossPhaseSelector Implements INode Constructors BossPhaseSelector(BossNodeData, INode[]) public BossPhaseSelector(BossNodeData bossNodeData, INode[] phasesInOrder) Parameters bossNodeData BossNodeData phasesInOrder INode[] Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to switch between different boss phase behaviours based on the Current Boss Phase value. public bool Run() Returns bool Updates the phase Run and returns its return value."
  },
  "api/WGR.AI.Nodes.BossPhaseUpdater.html": {
    "href": "api/WGR.AI.Nodes.BossPhaseUpdater.html",
    "title": "Class BossPhaseUpdater | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossPhaseUpdater Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class BossPhaseUpdater : INode Inheritance object BossPhaseUpdater Implements INode Constructors BossPhaseUpdater(BossNodeData, INode) public BossPhaseUpdater(BossNodeData bossNodeData, INode phaseBehaviour) Parameters bossNodeData BossNodeData phaseBehaviour INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to update the node behaviour. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.BossStunnedPhase.html": {
    "href": "api/WGR.AI.Nodes.BossStunnedPhase.html",
    "title": "Class BossStunnedPhase | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossStunnedPhase Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class BossStunnedPhase : INode Inheritance object BossStunnedPhase Implements INode Constructors BossStunnedPhase(BossNodeData, Action) public BossStunnedPhase(BossNodeData bossNodeData, Action callbackOnStunEnd) Parameters bossNodeData BossNodeData callbackOnStunEnd Action Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Sends the boss back to his last room position, if he's nearing his room position the callbackOnStunEnd Action gets called. public bool Run() Returns bool False if the boss is nto stunned, true when he is stunned and in his room position."
  },
  "api/WGR.AI.Nodes.ChaseAttackSelector.html": {
    "href": "api/WGR.AI.Nodes.ChaseAttackSelector.html",
    "title": "Class ChaseAttackSelector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ChaseAttackSelector Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class ChaseAttackSelector : INode Inheritance object ChaseAttackSelector Implements INode Constructors ChaseAttackSelector(INodeData, NavToTarget, AttackTargetAction) public ChaseAttackSelector(INodeData nodeData, NavToTarget navToTarget, AttackTargetAction attackTarget) Parameters nodeData INodeData navToTarget NavToTarget attackTarget AttackTargetAction Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() If the NavToTarget Run method returns false, calls and returns the AttackTargetAction Run method value. Returns false if none of the above apply. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.ChaseTargetActivator.html": {
    "href": "api/WGR.AI.Nodes.ChaseTargetActivator.html",
    "title": "Class ChaseTargetActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ChaseTargetActivator Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class ChaseTargetActivator : INode Inheritance object ChaseTargetActivator Implements INode Constructors ChaseTargetActivator(INodeData, ChaseAttackSelector) public ChaseTargetActivator(INodeData nodeData, ChaseAttackSelector chaseTarget) Parameters nodeData INodeData chaseTarget ChaseAttackSelector Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the nodeData target has been marked as found. If yes, Run and return the ChaseAttackSelector return value. Else return false. If the agent nodeData CanShoot value is false the node returns true. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.CheckIfDead.html": {
    "href": "api/WGR.AI.Nodes.CheckIfDead.html",
    "title": "Class CheckIfDead | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class CheckIfDead Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class CheckIfDead : INode Inheritance object CheckIfDead Implements INode Constructors CheckIfDead(EnemyNodeData, INode) public CheckIfDead(EnemyNodeData nodeData, INode child) Parameters nodeData EnemyNodeData child INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to update the INode passed in the node constructor ONLY if the agent is not dead. Returns the INode passed return value. Returns false if none of the above apply. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.CheckIfStunned.html": {
    "href": "api/WGR.AI.Nodes.CheckIfStunned.html",
    "title": "Class CheckIfStunned | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class CheckIfStunned Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class CheckIfStunned : INode Inheritance object CheckIfStunned Implements INode Constructors CheckIfStunned(EnemyNodeData, INode, INode) public CheckIfStunned(EnemyNodeData nodeData, INode stunedAction, INode mainBTEntry) Parameters nodeData EnemyNodeData stunedAction INode mainBTEntry INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent is marked as stunned. If true, run the mainBTEntry INode and return its return value. If false, run the stunnedAction INode and return its return value. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.EnemyNodeData.html": {
    "href": "api/WGR.AI.Nodes.EnemyNodeData.html",
    "title": "Class EnemyNodeData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyNodeData Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class EnemyNodeData : INodeData Inheritance object EnemyNodeData Implements INodeData Methods GetAttackAfterStun() public bool GetAttackAfterStun() Returns bool GetCanShoot() public bool GetCanShoot() Returns bool GetCurrentWaypointIndex() public int GetCurrentWaypointIndex() Returns int GetEnemyAnimations() public EnemyAnimations GetEnemyAnimations() Returns EnemyAnimations GetEnemyEntity() public EnemyEntity GetEnemyEntity() Returns EnemyEntity GetIdleTimeOnPatrol() public float GetIdleTimeOnPatrol() Returns float GetIsDead() public bool GetIsDead() Returns bool GetIsPatroller() public bool GetIsPatroller() Returns bool GetIsStunned() public bool GetIsStunned() Returns bool GetNavMeshAgent() public NavMeshAgent GetNavMeshAgent() Returns NavMeshAgent GetOcclusionLayers() public LayerMask GetOcclusionLayers() Returns LayerMask GetOriginalPos() public Vector3 GetOriginalPos() Returns Vector3 GetTarget() public Transform GetTarget() Returns Transform GetTargetFound() public bool GetTargetFound() Returns bool GetTargetIsDead() public bool GetTargetIsDead() Returns bool GetWaypointDistanceOffset() public float GetWaypointDistanceOffset() Returns float GetWaypoints() public List<Transform> GetWaypoints() Returns List<Transform> GetWeaponRange() public float GetWeaponRange() Returns float SetAttackAfterStun(bool) public void SetAttackAfterStun(bool value) Parameters value bool SetCanShoot(bool) public void SetCanShoot(bool value) Parameters value bool SetCurrentWaypointIndex(int) public void SetCurrentWaypointIndex(int value) Parameters value int SetEnemyAnimations(EnemyAnimations) public void SetEnemyAnimations(EnemyAnimations value) Parameters value EnemyAnimations SetEnemyEntity(EnemyEntity) public void SetEnemyEntity(EnemyEntity value) Parameters value EnemyEntity SetIdleTimeOnPatrol(float) public void SetIdleTimeOnPatrol(float value) Parameters value float SetIsDead(bool) public void SetIsDead(bool value) Parameters value bool SetIsPatroller(bool) public void SetIsPatroller(bool value) Parameters value bool SetIsStunned(bool) public void SetIsStunned(bool value) Parameters value bool SetNavMeshAgent(NavMeshAgent) public void SetNavMeshAgent(NavMeshAgent value) Parameters value NavMeshAgent SetOcclusionLayers(LayerMask) public void SetOcclusionLayers(LayerMask value) Parameters value LayerMask SetOriginalPos(Vector3) public void SetOriginalPos(Vector3 pos) Parameters pos Vector3 SetTarget(Transform) public void SetTarget(Transform value) Parameters value Transform SetTargetFound(bool) public void SetTargetFound(bool value) Parameters value bool SetTargetIsDead(bool) public void SetTargetIsDead(bool value) Parameters value bool SetWaypointDistanceOffset(float) public void SetWaypointDistanceOffset(float value) Parameters value float SetWaypoints(List<Transform>) public void SetWaypoints(List<Transform> value) Parameters value List<Transform> SetWeaponRange(float) public void SetWeaponRange(float value) Parameters value float"
  },
  "api/WGR.AI.Nodes.INode.html": {
    "href": "api/WGR.AI.Nodes.INode.html",
    "title": "Interface INode | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface INode Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll Interface used for Behaviour Tree traversing public interface INode Methods GetNodeData() Call to get the node data passed in the creation of the node. INodeData GetNodeData() Returns INodeData Run() Call to update the node behaviour. bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.INodeData.html": {
    "href": "api/WGR.AI.Nodes.INodeData.html",
    "title": "Interface INodeData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface INodeData Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll Base interface for AI Node Data classes public interface INodeData Methods GetCanShoot() bool GetCanShoot() Returns bool GetNavMeshAgent() NavMeshAgent GetNavMeshAgent() Returns NavMeshAgent GetOcclusionLayers() LayerMask GetOcclusionLayers() Returns LayerMask GetOriginalPos() Vector3 GetOriginalPos() Returns Vector3 GetTarget() Transform GetTarget() Returns Transform GetTargetFound() bool GetTargetFound() Returns bool GetTargetIsDead() bool GetTargetIsDead() Returns bool GetWeaponRange() float GetWeaponRange() Returns float SetCanShoot(bool) void SetCanShoot(bool value) Parameters value bool SetNavMeshAgent(NavMeshAgent) void SetNavMeshAgent(NavMeshAgent agent) Parameters agent NavMeshAgent SetOcclusionLayers(LayerMask) void SetOcclusionLayers(LayerMask value) Parameters value LayerMask SetOriginalPos(Vector3) void SetOriginalPos(Vector3 pos) Parameters pos Vector3 SetTarget(Transform) void SetTarget(Transform target) Parameters target Transform SetTargetFound(bool) void SetTargetFound(bool value) Parameters value bool SetTargetIsDead(bool) void SetTargetIsDead(bool value) Parameters value bool SetWeaponRange(float) void SetWeaponRange(float value) Parameters value float"
  },
  "api/WGR.AI.Nodes.IdleNode.html": {
    "href": "api/WGR.AI.Nodes.IdleNode.html",
    "title": "Class IdleNode | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IdleNode Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class IdleNode : INode Inheritance object IdleNode Implements INode Constructors IdleNode(EnemyNodeData) public IdleNode(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Checks if the AI is a patroller through the NodeData passed. If false, sets their walk animation state to false and returns true, else returns false. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.IdleOnArrival.html": {
    "href": "api/WGR.AI.Nodes.IdleOnArrival.html",
    "title": "Class IdleOnArrival | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IdleOnArrival Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class IdleOnArrival : INode Inheritance object IdleOnArrival Implements INode Constructors IdleOnArrival(EnemyNodeData) public IdleOnArrival(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Checks if enough time has passed based on the idle time while patrolling value. If true, sets the walking animation state to true and un-freezes the agent. Returns true. If false, sets the walking animation state to false and freezes the agent. Returns false. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.IdlePatrolChaseActivator.html": {
    "href": "api/WGR.AI.Nodes.IdlePatrolChaseActivator.html",
    "title": "Class IdlePatrolChaseActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IdlePatrolChaseActivator Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class IdlePatrolChaseActivator : INode Inheritance object IdlePatrolChaseActivator Implements INode Constructors IdlePatrolChaseActivator(EnemyNodeData, List<INode>) public IdlePatrolChaseActivator(EnemyNodeData nodeData, List<INode> children) Parameters nodeData EnemyNodeData children List<INode> Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to update the first branch that returns true from the passed list of INode children. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.NavToOriginalPos.html": {
    "href": "api/WGR.AI.Nodes.NavToOriginalPos.html",
    "title": "Class NavToOriginalPos | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class NavToOriginalPos Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class NavToOriginalPos : INode Inheritance object NavToOriginalPos Implements INode Constructors NavToOriginalPos(INodeData, INode) public NavToOriginalPos(INodeData nodeData, INode nextNode) Parameters nodeData INodeData nextNode INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the target is marked as dead. If true, set the agents' current destination back to his spawn position and return true. If false, run the INode passed as nextNode and return its retun value. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.NavToRoom.html": {
    "href": "api/WGR.AI.Nodes.NavToRoom.html",
    "title": "Class NavToRoom | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class NavToRoom Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class NavToRoom : INode Inheritance object NavToRoom Implements INode Constructors NavToRoom(BossNodeData, BossPhaseSelector) public NavToRoom(BossNodeData bossNodeData, BossPhaseSelector phaseSelector) Parameters bossNodeData BossNodeData phaseSelector BossPhaseSelector Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to send the agent to his current set room waypoint when he is in hiding mode. public bool Run() Returns bool True when he is in hiding mode and close to the waypoint. Else runs the BossPhaseSelector and returns its return value."
  },
  "api/WGR.AI.Nodes.NavToTarget.html": {
    "href": "api/WGR.AI.Nodes.NavToTarget.html",
    "title": "Class NavToTarget | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class NavToTarget Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class NavToTarget : INode Inheritance object NavToTarget Implements INode Constructors NavToTarget(INodeData) public NavToTarget(INodeData nodeData) Parameters nodeData INodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to set the agent destination to the currenty set Target transfrom (through the node data). When the target is inside attack range (nodeData.WeaponRange) the agent freezes and checks for occlusion based on the occlusion layers passed in node data. If the Occlusion check returns true, the agent unfreezes and the node returns true. Else, returns false without un-freezing. While the target is not inside attack range the node returns true. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.PatrolCheckDistance.html": {
    "href": "api/WGR.AI.Nodes.PatrolCheckDistance.html",
    "title": "Class PatrolCheckDistance | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolCheckDistance Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class PatrolCheckDistance : INode Inheritance object PatrolCheckDistance Implements INode Constructors PatrolCheckDistance(EnemyNodeData, IdleOnArrival) public PatrolCheckDistance(EnemyNodeData nodeData, IdleOnArrival idleNode) Parameters nodeData EnemyNodeData idleNode IdleOnArrival Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent is nearing the currently set waypoint based on the node data set offset float. When true, run the idleNode (IdleOnArrival INode) and return its return value. Increments the current waypoint index. When the idleNode returns false, THIS node returns false. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.PatrolNavToActivator.html": {
    "href": "api/WGR.AI.Nodes.PatrolNavToActivator.html",
    "title": "Class PatrolNavToActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolNavToActivator Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class PatrolNavToActivator : INode Inheritance object PatrolNavToActivator Implements INode Constructors PatrolNavToActivator(EnemyNodeData, PatrolNavigateTo) public PatrolNavToActivator(EnemyNodeData nodeData, PatrolNavigateTo navTo) Parameters nodeData EnemyNodeData navTo PatrolNavigateTo Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent is in the currently set waypoint (through his nodeData). If true, returns false. If false, call the Run method of the navTo (PatrolNavigateTo INode) and return its return value. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.PatrolNavigateTo.html": {
    "href": "api/WGR.AI.Nodes.PatrolNavigateTo.html",
    "title": "Class PatrolNavigateTo | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolNavigateTo Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class PatrolNavigateTo : INode Inheritance object PatrolNavigateTo Implements INode Constructors PatrolNavigateTo(EnemyNodeData) public PatrolNavigateTo(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to set the agent stoppin distance to 0, navigate him to the currently set waypoint (through his node data) and set its walk animation state to true. Always returns true. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.PatrolNode.html": {
    "href": "api/WGR.AI.Nodes.PatrolNode.html",
    "title": "Class PatrolNode | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolNode Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class PatrolNode : INode Inheritance object PatrolNode Implements INode Constructors PatrolNode(EnemyNodeData, INode, INode) public PatrolNode(EnemyNodeData nodeData, INode distanceCheck, INode navTo) Parameters nodeData EnemyNodeData distanceCheck INode navTo INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent has found its target OR if he is not a patroller, if true, returns false for early exit. If the navTo INode returns false, calls the Run method of distanceCheck INode and returns its value. Returns false if none of the above apply. public bool Run() Returns bool"
  },
  "api/WGR.AI.Nodes.StunedAction.html": {
    "href": "api/WGR.AI.Nodes.StunedAction.html",
    "title": "Class StunedAction | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class StunedAction Namespace WGR.AI.Nodes Assembly Assembly-CSharp.dll public class StunedAction : INode Inheritance object StunedAction Implements INode Constructors StunedAction(EnemyNodeData) public StunedAction(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call check if enough time has passed since the agent got marked as stunned. If true, set the stunned animation state, along with the enemy entity and node data stunned values to false. If the agent is still alive activate his attacking behaviour by setting the TargetFound value to true through the node data. public bool Run() Returns bool False when the time reaches 0, True when is greater than 0."
  },
  "api/WGR.AI.Nodes.html": {
    "href": "api/WGR.AI.Nodes.html",
    "title": "Namespace WGR.AI.Nodes | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.AI.Nodes Classes AttackTargetAction BehaviourTree BossNodeData BossPhaseSelector BossPhaseUpdater BossStunnedPhase ChaseAttackSelector ChaseTargetActivator CheckIfDead CheckIfStunned EnemyNodeData IdleNode IdleOnArrival IdlePatrolChaseActivator NavToOriginalPos NavToRoom NavToTarget PatrolCheckDistance PatrolNavToActivator PatrolNavigateTo PatrolNode StunedAction Interfaces INode Interface used for Behaviour Tree traversing INodeData Base interface for AI Node Data classes"
  },
  "api/WGR.Core.AIEntityManager.html": {
    "href": "api/WGR.Core.AIEntityManager.html",
    "title": "Class AIEntityManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityManager Namespace WGR.Core Assembly Assembly-CSharp.dll public class AIEntityManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AIEntityManager Methods ActivateBossPlayerDetectors() public void ActivateBossPlayerDetectors() ActivateDetectors() public void ActivateDetectors() AddEntityReference(AIEntity) Called from each enemy in the level when it loads. public void AddEntityReference(AIEntity entity) Parameters entity AIEntity GetEnemyEntityRefs() Call to get a reference to the EnemyEntity list. public List<AIEntity> GetEnemyEntityRefs() Returns List<AIEntity> GetEnemyRefCount() Call to get an EnemyEntity list count. public int GetEnemyRefCount() Returns int KillAllEnemiesInLevel() public void KillAllEnemiesInLevel() SetAgentBehaviourUpdate(bool) public void SetAgentBehaviourUpdate(bool value) Parameters value bool SetBossDetectors(AIEntityFOVManager) public void SetBossDetectors(AIEntityFOVManager bossFOVManager) Parameters bossFOVManager AIEntityFOVManager"
  },
  "api/WGR.Core.Ability.html": {
    "href": "api/WGR.Core.Ability.html",
    "title": "Class Ability | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Ability Namespace WGR.Core Assembly Assembly-CSharp.dll public abstract class Ability Inheritance object Ability Derived RewindTime SlowDownTime StopTime Fields AbilityDescription public string AbilityDescription Field Value string AbilityName public string AbilityName Field Value string AbilitySprite public Sprite AbilitySprite Field Value Sprite AbilityTier public int AbilityTier Field Value int ActiveTime public int ActiveTime Field Value int MaxAbilityTier public int MaxAbilityTier Field Value int UsesPerLevel public int UsesPerLevel Field Value int cachedUses protected int cachedUses Field Value int timer protected float timer Field Value float Properties CanActivate public bool CanActivate { get; protected set; } Property Value bool IsUnlocked public bool IsUnlocked { get; set; } Property Value bool Methods AbilityInfoFullReset() public abstract void AbilityInfoFullReset() Compare(Ability, Ability) public virtual bool Compare(Ability ability, Ability otherAbility) Parameters ability Ability otherAbility Ability Returns bool DisableBehaviourOnSceneChange(GameScenes) public abstract void DisableBehaviourOnSceneChange(GameScenes scene) Parameters scene GameScenes EnableAbility() Call to set IsUnlocked and CanActivate to true. protected abstract void EnableAbility() GetCachedUses() public abstract int GetCachedUses() Returns int GetPointsForUpgrade() Returns the SkillPointsPerTier() value. public abstract int GetPointsForUpgrade() Returns int OnAbilityFinished() Call when the ability behaviour is finished to revert back any changes. protected abstract void OnAbilityFinished() PlayAbilitySound() protected abstract void PlayAbilitySound() ResetAbilityUses() Call to reset the ability uses back to maxAbilityUses. public abstract void ResetAbilityUses() SkillPointsPerTier() Returns the skill points needed for ability tier up. protected abstract int SkillPointsPerTier() Returns int Start(Action) Call to fire off the ability initiation. public abstract void Start(Action callback) Parameters callback Action TryActivate() Call to Enable the ability behaviour. public abstract bool TryActivate() Returns bool UpdateAbilityTick() Call to update the ability info per frame (Used in MonoBehaviour Update()). The passed method gets called when the ability pre-requisites are met. public abstract void UpdateAbilityTick() UpdateStatsPerTier() Call to update the current ability stats based on its current tier. public abstract void UpdateStatsPerTier() UpgradeAbility() Call to increase the ability tier by 1. public abstract void UpgradeAbility()"
  },
  "api/WGR.Core.AbilityManager.html": {
    "href": "api/WGR.Core.AbilityManager.html",
    "title": "Class AbilityManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AbilityManager Namespace WGR.Core Assembly Assembly-CSharp.dll public class AbilityManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AbilityManager Properties AbilitiesCanActivate When set to true abilities are shown and enabled, if false then abilities are neither drawn or can be used. public bool AbilitiesCanActivate { get; set; } Property Value bool AbilitiesCanCycle public bool AbilitiesCanCycle { get; } Property Value bool ActiveAbilityIndex Active ability index can be used from the UI to visualize the currently selected ability. public int ActiveAbilityIndex { get; } Property Value int Methods CanRewind(bool) Call to check if the rewind ability UsesPerLevel is greater than 0. If yes, then return true, false otherwise. public bool CanRewind(bool subtractOneUse) Parameters subtractOneUse bool If set to true and the above evaluation results to true too, then subtract one use from the rewind ability UsesPerLevel value. Returns bool EnableAbilities() Call to cycle through all the abilities and reset their ability uses. public void EnableAbilities() GetAbilityCurrentTier(AbilityType) This method is used from the HandleAbilityPanel script to update the PlayerHub ability panel texts. public int GetAbilityCurrentTier(AbilityType type) Parameters type AbilityType The ability you want to display. Returns int The passed ability tier number. GetAbilityDescription(AbilityType) public string GetAbilityDescription(AbilityType type) Parameters type AbilityType Returns string GetCurrentSelectedAbility() Call to get the current selected ability index. public int GetCurrentSelectedAbility() Returns int GetPointsNeeded(AbilityType) This method is used from the UI to display the skill points needed for each tier update. public int GetPointsNeeded(AbilityType type) Parameters type AbilityType The ability you want to display. Returns int The points for tier update. UpdateAbilityTier(AbilityType) This method is added as a listener to the Ability update button in the PlayerHub. public void UpdateAbilityTier(AbilityType type) Parameters type AbilityType The ability type you want to update."
  },
  "api/WGR.Core.AbilityTVActivator.html": {
    "href": "api/WGR.Core.AbilityTVActivator.html",
    "title": "Class AbilityTVActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AbilityTVActivator Namespace WGR.Core Assembly Assembly-CSharp.dll public class AbilityTVActivator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AbilityTVActivator"
  },
  "api/WGR.Core.AbilityType.html": {
    "href": "api/WGR.Core.AbilityType.html",
    "title": "Enum AbilityType | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum AbilityType Namespace WGR.Core Assembly Assembly-CSharp.dll All the available abilities the player has. public enum AbilityType Fields RewindTime = 1 Slowtime = 0 StopTime = 2"
  },
  "api/WGR.Core.ActivateAbilityTest.html": {
    "href": "api/WGR.Core.ActivateAbilityTest.html",
    "title": "Class ActivateAbilityTest | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ActivateAbilityTest Namespace WGR.Core Assembly Assembly-CSharp.dll public class ActivateAbilityTest : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ActivateAbilityTest"
  },
  "api/WGR.Core.BossStunnedSequence.html": {
    "href": "api/WGR.Core.BossStunnedSequence.html",
    "title": "Class BossStunnedSequence | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossStunnedSequence Namespace WGR.Core Assembly Assembly-CSharp.dll public class BossStunnedSequence : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BossStunnedSequence Methods Ending_KillBossAndContinue() Call to start the bad ending sequence. Call to display one last dialogue before moving the player to the player hub. public void Ending_KillBossAndContinue()"
  },
  "api/WGR.Core.ButtonPrompt.html": {
    "href": "api/WGR.Core.ButtonPrompt.html",
    "title": "Class ButtonPrompt | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ButtonPrompt Namespace WGR.Core Assembly Assembly-CSharp.dll public class ButtonPrompt : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ButtonPrompt Methods DisableInteraction() Cal to make the canvas non-interactable and invisible. public void DisableInteraction()"
  },
  "api/WGR.Core.CameraBehaviour.html": {
    "href": "api/WGR.Core.CameraBehaviour.html",
    "title": "Class CameraBehaviour | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class CameraBehaviour Namespace WGR.Core Assembly Assembly-CSharp.dll public class CameraBehaviour : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour CameraBehaviour Fields maxZoomIn public float maxZoomIn Field Value float maxZoomOut public float maxZoomOut Field Value float zoomForce public float zoomForce Field Value float Methods StartShakeSequence(float, float) Call to initiate the camera shake sequence. Calls the SimulateShake() method Sets isShaking to true public void StartShakeSequence(float length, float power) Parameters length float power float"
  },
  "api/WGR.Core.DialogueController.html": {
    "href": "api/WGR.Core.DialogueController.html",
    "title": "Class DialogueController | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class DialogueController Namespace WGR.Core Assembly Assembly-CSharp.dll public class DialogueController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DialogueController Methods TypeSentence(string, Action, float, bool, bool) Display the given sentence letter by letter in the given text box with a small interval and then call the passed callbackMethod. dontShowButtonPrompt -If true then the sentence gets displayed automatically. public IEnumerator TypeSentence(string sentenceToType, Action callbackMethod, float typeSpeed, bool waitForInput, bool dontShowButtonPrompt = false) Parameters sentenceToType string callbackMethod Action typeSpeed float waitForInput bool dontShowButtonPrompt bool Returns IEnumerator TypeSentence(string, float, bool, bool) Display the given sentence letter by letter in the given text box with a small interval. public IEnumerator TypeSentence(string sentenceToType, float typeSpeed, bool waitForInput, bool dontShowButtonPrompt = false) Parameters sentenceToType string typeSpeed float waitForInput bool dontShowButtonPrompt bool Returns IEnumerator TypeSentenceSequences(Action, float, List<string>, List<Sprite>, bool) Display the given list of sentences along with their icons letter by letter in the text box with a small interval and then call the passed callbackMethod. dontShowButtonPrompt -If true then the sentence gets displayed automatically. public IEnumerator TypeSentenceSequences(Action callbackMethod, float typeSpeed, List<string> sentenceToType, List<Sprite> imagePerSentence, bool dontShowPrompt = false) Parameters callbackMethod Action typeSpeed float sentenceToType List<string> imagePerSentence List<Sprite> dontShowPrompt bool Returns IEnumerator"
  },
  "api/WGR.Core.DialogueOnTriggerEnter.html": {
    "href": "api/WGR.Core.DialogueOnTriggerEnter.html",
    "title": "Class DialogueOnTriggerEnter | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class DialogueOnTriggerEnter Namespace WGR.Core Assembly Assembly-CSharp.dll public class DialogueOnTriggerEnter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DialogueOnTriggerEnter Methods OnTriggerEnter(Collider) public void OnTriggerEnter(Collider collision) Parameters collision Collider"
  },
  "api/WGR.Core.DisplayTooltip.html": {
    "href": "api/WGR.Core.DisplayTooltip.html",
    "title": "Class DisplayTooltip | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class DisplayTooltip Namespace WGR.Core Assembly Assembly-CSharp.dll public class DisplayTooltip : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DisplayTooltip Methods OnPointerEnter(PointerEventData) Use this callback to detect pointer enter events public void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData OnPointerExit(PointerEventData) Use this callback to detect pointer exit events public void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/WGR.Core.DoorKickable.html": {
    "href": "api/WGR.Core.DoorKickable.html",
    "title": "Class DoorKickable | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class DoorKickable Namespace WGR.Core Assembly Assembly-CSharp.dll public class DoorKickable : KickableEntity, IKickable Inheritance object Object Component Behaviour MonoBehaviour KickableEntity DoorKickable Implements IKickable Inherited Members KickableEntity.kickForce KickableEntity.stunOnCollision KickableEntity.entityRB KickableEntity.kicked KickableEntity.oppositeDir KickableEntity.stunTimer KickableEntity.stunTimerCache KickableEntity.canStun Methods External_UnlockDoor() Call to make the door gameObject interactable and open-able. public void External_UnlockDoor() SimulateKnockback(Vector3) Call to push the door gameObject to the opposite of the incoming direction and set kicked and canStun to true. If neverUnlock is set to true or the door is in the NonCollidable DoorLayer nothing happens. public override void SimulateKnockback(Vector3 incomingDir) Parameters incomingDir Vector3 Update() protected void Update()"
  },
  "api/WGR.Core.DynamicCrosshair.html": {
    "href": "api/WGR.Core.DynamicCrosshair.html",
    "title": "Class DynamicCrosshair | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class DynamicCrosshair Namespace WGR.Core Assembly Assembly-CSharp.dll public class DynamicCrosshair : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DynamicCrosshair"
  },
  "api/WGR.Core.EnemyKickable.html": {
    "href": "api/WGR.Core.EnemyKickable.html",
    "title": "Class EnemyKickable | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyKickable Namespace WGR.Core Assembly Assembly-CSharp.dll public class EnemyKickable : KickableEntity, IKickable Inheritance object Object Component Behaviour MonoBehaviour KickableEntity EnemyKickable Implements IKickable Inherited Members KickableEntity.kickForce KickableEntity.stunOnCollision KickableEntity.entityRB KickableEntity.kicked KickableEntity.oppositeDir KickableEntity.stunTimer KickableEntity.stunTimerCache KickableEntity.canStun Methods SimulateKnockback(Vector3) Call to push the enemy gameobject to the opposite of the passed vector. public override void SimulateKnockback(Vector3 incomingDir) Parameters incomingDir Vector3 Update() protected void Update()"
  },
  "api/WGR.Core.Entity.html": {
    "href": "api/WGR.Core.Entity.html",
    "title": "Class Entity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Entity Namespace WGR.Core Assembly Assembly-CSharp.dll public abstract class Entity : MonoBehaviour, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity Implements IInteractable Derived AIEntity PlayerEntity Fields entityLife protected Stat<float> entityLife Field Value Stat<float> entityName protected Stat<string> entityName Field Value Stat<string> Methods AttackInteraction() Call to initiate the attack interaction behaviour of any Entity GameObject public abstract void AttackInteraction() StunInteraction() Call to initiate the stun interaction of any Entity GameObject public abstract void StunInteraction()"
  },
  "api/WGR.Core.GameAudioClip.html": {
    "href": "api/WGR.Core.GameAudioClip.html",
    "title": "Enum GameAudioClip | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum GameAudioClip Namespace WGR.Core Assembly Assembly-CSharp.dll public enum GameAudioClip Fields DoorKick = 4 DoorOpen = 31 ElevatorArrival = 3 EmptyGunSound = 0 Hit = 6 Hit1 = 7 Hit2 = 8 Hit3 = 9 KnifeCut1 = 10 KnifeCut2 = 11 Pause = 22 PressPlay = 24 PressRewind = 25 PressStop = 26 Punch = 12 PunchSound = 1 PunchSwing1 = 13 PunchSwing2 = 14 Rewind = 27 ShootSound = 2 Shotgun = 30 StaticVHS = 16 StopActivate = 28 Unpause = 23 Uzi = 29 VHSClose = 17 VHSOpen = 18 VHSSlideIn = 19 VHSSlideOut = 20 VHSStatic = 21 WeaponPickUp = 5 WeaponThrow = 15"
  },
  "api/WGR.Core.GameEventsHandler.html": {
    "href": "api/WGR.Core.GameEventsHandler.html",
    "title": "Class GameEventsHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class GameEventsHandler Namespace WGR.Core Assembly Assembly-CSharp.dll public class GameEventsHandler Inheritance object GameEventsHandler Constructors GameEventsHandler() public GameEventsHandler() Methods CameraShakeOnEnemyDeath(float, float) public void CameraShakeOnEnemyDeath(float lenght, float power) Parameters lenght float power float OnAbilityEnd() public void OnAbilityEnd() OnAbilityUse(float, float, bool) public void OnAbilityUse(float newSpeed, float newRotSpeed, bool isFrozen) Parameters newSpeed float newRotSpeed float isFrozen bool OnBossLevelEnemyDeath() public void OnBossLevelEnemyDeath() OnBossStunnedPhase() public void OnBossStunnedPhase() OnBulletSpeedChange(float) public void OnBulletSpeedChange(float newSpeed) Parameters newSpeed float OnEnemyDeath() public void OnEnemyDeath() OnGamePaused() public void OnGamePaused() OnGameResumed() public void OnGameResumed() OnLevelPassed(GameScenes) public void OnLevelPassed(GameScenes currentScene) Parameters currentScene GameScenes OnPlayerDeath() public void OnPlayerDeath() OnPlayerRewind(bool) public void OnPlayerRewind(bool value) Parameters value bool OnPlayerShootEnd() public void OnPlayerShootEnd() OnPlayerShootStart() public void OnPlayerShootStart() OnPlayerSpawn(Vector3) public void OnPlayerSpawn(Vector3 levelPoint) Parameters levelPoint Vector3 OnSaveOvewrite() public void OnSaveOvewrite() OnSceneChanged(GameScenes) public void OnSceneChanged(GameScenes activeScene) Parameters activeScene GameScenes OnSceneUnloaded(GameScenes) public void OnSceneUnloaded(GameScenes unloadedScene) Parameters unloadedScene GameScenes OnWeaponPickup() public void OnWeaponPickup() Events cameraShakeOnEnemyDeath Called whenever an enemy dies to initiate the camera shake behaviour and passes the length and the power of the shake. public event Action<float, float> cameraShakeOnEnemyDeath Event Type Action<float, float> onAbilityEnd Called from Player abilities to notify every subbed method that an ability behaviour has finished. Mainly used in ThrowableEntity. public event Action onAbilityEnd Event Type Action onAbilityUse Called from player abilities and used from ThrowableEntities to change their speed and rotation speed in runtime. public event Action<float, float, bool> onAbilityUse Event Type Action<float, float, bool> onBossLevelEnemyDeath Called from EnemyEntity script whenever a LEVEL 5 enemy dies. public event Action onBossLevelEnemyDeath Event Type Action onBossStunnedPhase Called from BossEntity script when he arrives at his stunned position. public event Action onBossStunnedPhase Event Type Action onBulletSpeedChange Called whenever the CurrentSpeed of the BulletStatics script is changed to update every FIRED bullet speed. public event Action<float> onBulletSpeedChange Event Type Action<float> onEnemyDeath Called whenever an enemy dies. public event Action onEnemyDeath Event Type Action onGamePause Called whenever the game pauses public event Action onGamePause Event Type Action onGameResumed Called whenever the game un-pauses public event Action onGameResumed Event Type Action onLevelPassed Called whenever the player WINS a level. Used for skill point aquisition. public event Action<GameScenes> onLevelPassed Event Type Action<GameScenes> onPlayerDeath Called whenever the player dies. public event Action onPlayerDeath Event Type Action onPlayerRewind Called whenever the player starts going back in his previous positions, not when the rewind ability gets used. public event Action<bool> onPlayerRewind Event Type Action<bool> onPlayerShootEnd Called from PlayerAttack to notify every subbed method that the player stopped firing a gun. public event Action onPlayerShootEnd Event Type Action onPlayerShootStart Called from PlayerAttack to notify every subbed method that the player fired a gun. public event Action onPlayerShootStart Event Type Action onPlayerSpawn Called whenever a new scene is loaded to move the player to a specific spot. Called from MoveToStart script. public event Action<Vector3> onPlayerSpawn Event Type Action<Vector3> onSaveOverwrite public event Action onSaveOverwrite Event Type Action onSceneChanged Called after the NEW SCENE is LOADED and passes the new scene to its subscribers. public event Action<GameScenes> onSceneChanged Event Type Action<GameScenes> onSceneUnloaded public event Action<GameScenes> onSceneUnloaded Event Type Action<GameScenes> onWeaponPickup Called when the player picks up the bat prefab in the intro scene. public event Action onWeaponPickup Event Type Action"
  },
  "api/WGR.Core.GameManager.html": {
    "href": "api/WGR.Core.GameManager.html",
    "title": "Class GameManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class GameManager Namespace WGR.Core Assembly Assembly-CSharp.dll public class GameManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GameManager Fields S public static GameManager S Field Value GameManager Properties AIEntityManager public AIEntityManager AIEntityManager { get; } Property Value AIEntityManager AbilityManager public AbilityManager AbilityManager { get; } Property Value AbilityManager BulletPool public BulletPool BulletPool { get; } Property Value BulletPool GameEventHandler public GameEventsHandler GameEventHandler { get; } Property Value GameEventsHandler GameSoundsHandler public GameSoundsHandler GameSoundsHandler { get; } Property Value GameSoundsHandler HUDHandler public UserHUDHandler HUDHandler { get; } Property Value UserHUDHandler LevelManager public LevelManager LevelManager { get; } Property Value LevelManager PlayerDeaths public int PlayerDeaths { get; set; } Property Value int PlayerEntity public PlayerEntity PlayerEntity { get; } Property Value PlayerEntity SaveDataHandler public SaveDataHandler SaveDataHandler { get; } Property Value SaveDataHandler SkillPointHandle public SkillPointHandle SkillPointHandle { get; } Property Value SkillPointHandle UIManager public UI_Manager UIManager { get; } Property Value UI_Manager WeaponManager public WeaponManager WeaponManager { get; } Property Value WeaponManager WeaponSelectionUIHandler public WeaponSelectionUI WeaponSelectionUIHandler { get; } Property Value WeaponSelectionUI Methods SetHUDHandler(UserHUDHandler) Call to set the UserHUDHandler field to the passed reference. Called from UserHUDHandler in runtime. public void SetHUDHandler(UserHUDHandler hudHandler) Parameters hudHandler UserHUDHandler SetPlayerEntity(PlayerEntity) Call to set the PlayerEntity field to the passed reference. Called from PlayerEntity in runtime. public void SetPlayerEntity(PlayerEntity player) Parameters player PlayerEntity SetWeaponSelectionUIHandler(WeaponSelectionUI) Call to set the WeaponSelectionUI field to the passed reference. Called from WeaponSelectionUI in runtime. public void SetWeaponSelectionUIHandler(WeaponSelectionUI weaponSelectionUI) Parameters weaponSelectionUI WeaponSelectionUI"
  },
  "api/WGR.Core.GameScenes.html": {
    "href": "api/WGR.Core.GameScenes.html",
    "title": "Enum GameScenes | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum GameScenes Namespace WGR.Core Assembly Assembly-CSharp.dll All the game scenes enumerated for ease of access, the index MUST be the same as the build index. public enum GameScenes Fields AbilitiesTutorial = 6 AnyScene = -1 GameEntryScene = 0 Level1 = 7 Level2 = 8 Level3 = 9 Level4 = 10 Level5 = 11 MainMenu = 1 NewGameIntro = 4 PlayerHub = 5 PlayerScene = 3 UI_Scene = 2"
  },
  "api/WGR.Core.GameSoundsHandler.html": {
    "href": "api/WGR.Core.GameSoundsHandler.html",
    "title": "Class GameSoundsHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class GameSoundsHandler Namespace WGR.Core Assembly Assembly-CSharp.dll public class GameSoundsHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GameSoundsHandler Fields mainAudioSource public AudioSource mainAudioSource Field Value AudioSource sfxSource public AudioSource sfxSource Field Value AudioSource Methods ChangeSoundPitch(float) public void ChangeSoundPitch(float value) Parameters value float DecreaseVolumeByPoint1() public void DecreaseVolumeByPoint1() ForceAmbienceSFX() public void ForceAmbienceSFX() ForcePlayBossMusic() public void ForcePlayBossMusic() ForcePlayBossStunnedMusic() public void ForcePlayBossStunnedMusic() IncreaseVolumeByPoint1() public void IncreaseVolumeByPoint1() PlayOneShot(GameAudioClip) public void PlayOneShot(GameAudioClip clip) Parameters clip GameAudioClip SetGameWideSoundtrackState(bool) public void SetGameWideSoundtrackState(bool pause) Parameters pause bool SetSoundReferences(Slider) public void SetSoundReferences(Slider musicSlider) Parameters musicSlider Slider SetVolume(float) public void SetVolume(float value) Parameters value float"
  },
  "api/WGR.Core.HandleAbilityUpdatePanel.html": {
    "href": "api/WGR.Core.HandleAbilityUpdatePanel.html",
    "title": "Class HandleAbilityUpdatePanel | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class HandleAbilityUpdatePanel Namespace WGR.Core Assembly Assembly-CSharp.dll public class HandleAbilityUpdatePanel : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour HandleAbilityUpdatePanel Methods ClearDescriptionText() Call to set the description text string to String.Empty. Calls RefreshAbilityUI(). public void ClearDescriptionText() RefreshUISceneChanged(GameScenes) Called whenever the scene gets changed to refresh the UI. public void RefreshUISceneChanged(GameScenes scene) Parameters scene GameScenes UpdateAbility(AbilityType) Call to update the passed type ability. Updates the description and refreshes the UI. (UpdateDescription() - RefreshAbilityUI()) public void UpdateAbility(AbilityType type) Parameters type AbilityType UpdateDescription(string) Call to set the description text to the passed value. public void UpdateDescription(string text) Parameters text string UpdateDescription(AbilityType) Call to update the abilities UI description based on the ability type passed. Refreshes the UI. (RefreshAbilityUI()) public void UpdateDescription(AbilityType type) Parameters type AbilityType"
  },
  "api/WGR.Core.HubPanelActivator.html": {
    "href": "api/WGR.Core.HubPanelActivator.html",
    "title": "Class HubPanelActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class HubPanelActivator Namespace WGR.Core Assembly Assembly-CSharp.dll public class HubPanelActivator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour HubPanelActivator Methods SetCanActivate(bool) Call to set the ability to activate this panel when the user presses the prompted button. public void SetCanActivate(bool state) Parameters state bool"
  },
  "api/WGR.Core.IInteractable.html": {
    "href": "api/WGR.Core.IInteractable.html",
    "title": "Interface IInteractable | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface IInteractable Namespace WGR.Core Assembly Assembly-CSharp.dll public interface IInteractable Methods AttackInteraction() void AttackInteraction() StunInteraction() void StunInteraction()"
  },
  "api/WGR.Core.IKickable.html": {
    "href": "api/WGR.Core.IKickable.html",
    "title": "Interface IKickable | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface IKickable Namespace WGR.Core Assembly Assembly-CSharp.dll public interface IKickable Methods SimulateKnockback(Vector3) void SimulateKnockback(Vector3 incomingDir) Parameters incomingDir Vector3"
  },
  "api/WGR.Core.IRewindable.html": {
    "href": "api/WGR.Core.IRewindable.html",
    "title": "Interface IRewindable | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface IRewindable Namespace WGR.Core Assembly Assembly-CSharp.dll This interface can be attached to any gameObject to make it rewindable with the Rewind ability. public interface IRewindable Methods GetPosition() Vector3 GetPosition() Returns Vector3 SetPosition(Vector3) void SetPosition(Vector3 newPos) Parameters newPos Vector3"
  },
  "api/WGR.Core.IntroSceneSequencer.html": {
    "href": "api/WGR.Core.IntroSceneSequencer.html",
    "title": "Class IntroSceneSequencer | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IntroSceneSequencer Namespace WGR.Core Assembly Assembly-CSharp.dll public class IntroSceneSequencer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour IntroSceneSequencer"
  },
  "api/WGR.Core.KickableEntity.html": {
    "href": "api/WGR.Core.KickableEntity.html",
    "title": "Class KickableEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class KickableEntity Namespace WGR.Core Assembly Assembly-CSharp.dll public class KickableEntity : MonoBehaviour, IKickable Inheritance object Object Component Behaviour MonoBehaviour KickableEntity Implements IKickable Derived DoorKickable EnemyKickable Fields canStun protected bool canStun Field Value bool entityRB protected Rigidbody entityRB Field Value Rigidbody kickForce protected float kickForce Field Value float kicked protected bool kicked Field Value bool oppositeDir protected Vector3 oppositeDir Field Value Vector3 stunOnCollision protected bool stunOnCollision Field Value bool stunTimer protected float stunTimer Field Value float stunTimerCache protected float stunTimerCache Field Value float Methods SimulateKnockback(Vector3) Call to start a knockback simulation on the gameObject that THIS script is attached to. Knockback force is set from the inpsector (kickForce) public virtual void SimulateKnockback(Vector3 incomingDir) Parameters incomingDir Vector3 The transform of the Kicker"
  },
  "api/WGR.Core.LevelLoadPacket.html": {
    "href": "api/WGR.Core.LevelLoadPacket.html",
    "title": "Class LevelLoadPacket | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class LevelLoadPacket Namespace WGR.Core Assembly Assembly-CSharp.dll public class LevelLoadPacket : ScriptableObject Inheritance object Object ScriptableObject LevelLoadPacket Fields PacketIndex public int PacketIndex Field Value int PacketMainScene public GameScenes PacketMainScene Field Value GameScenes ScenesToLoad public GameScenes[] ScenesToLoad Field Value GameScenes[] ScenesToUnload public GameScenes[] ScenesToUnload Field Value GameScenes[]"
  },
  "api/WGR.Core.LevelManager.html": {
    "href": "api/WGR.Core.LevelManager.html",
    "title": "Class LevelManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class LevelManager Namespace WGR.Core Assembly Assembly-CSharp.dll public class LevelManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LevelManager Properties ActiveScene public GameScenes[] ActiveScene { get; } Property Value GameScenes[] FocusedScene public GameScenes FocusedScene { get; } Property Value GameScenes Methods ForceLoad(int) Call to forcefully load a level, mainly used when the player dies to get back to the playerHub. public void ForceLoad(int levelPacketIndex) Parameters levelPacketIndex int The packet index to load LoadGameScene() public void LoadGameScene() LoadNext(bool, int) Call to load the next scene load packet (order set from inspector). If fromForceLoad is true then a packet index must be passed so the packet indexer can automatically set itself in the correct List index. public void LoadNext(bool fromForceLoad, int packetIndex = 0) Parameters fromForceLoad bool packetIndex int SetFaderReference(SceneFader) public void SetFaderReference(SceneFader fader) Parameters fader SceneFader StartNewGameScene() public void StartNewGameScene() TransitToAbilitiesTests() public void TransitToAbilitiesTests() TransitToPlayerHub() public void TransitToPlayerHub()"
  },
  "api/WGR.Core.MainMenuManager.html": {
    "href": "api/WGR.Core.MainMenuManager.html",
    "title": "Class MainMenuManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class MainMenuManager Namespace WGR.Core Assembly Assembly-CSharp.dll public class MainMenuManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour MainMenuManager"
  },
  "api/WGR.Core.MoveToStart.html": {
    "href": "api/WGR.Core.MoveToStart.html",
    "title": "Class MoveToStart | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class MoveToStart Namespace WGR.Core Assembly Assembly-CSharp.dll public class MoveToStart : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour MoveToStart"
  },
  "api/WGR.Core.MurderPlayerSequencer.html": {
    "href": "api/WGR.Core.MurderPlayerSequencer.html",
    "title": "Class MurderPlayerSequencer | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class MurderPlayerSequencer Namespace WGR.Core Assembly Assembly-CSharp.dll public class MurderPlayerSequencer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour MurderPlayerSequencer"
  },
  "api/WGR.Core.OnMouseHover.html": {
    "href": "api/WGR.Core.OnMouseHover.html",
    "title": "Class OnMouseHover | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class OnMouseHover Namespace WGR.Core Assembly Assembly-CSharp.dll public class OnMouseHover : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour OnMouseHover Fields type public AbilityType type Field Value AbilityType Methods OnPointerClick(PointerEventData) Called whenever the cursor gets pressed and isHovering is true FOR THIS SCRIPT INSTANCE. public void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnPointerEnter(PointerEventData) Called whenever the cursor enters the assigned buttons' area to update the ability description based on the selected ability type from the inspector. Sets isHovering to true. public void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData OnPointerExit(PointerEventData) Called whenever the cursor leaves the assigned buttons' area to clear the ability description text. Sets isHovering to false. public void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/WGR.Core.PanelReferences.html": {
    "href": "api/WGR.Core.PanelReferences.html",
    "title": "Class PanelReferences | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PanelReferences Namespace WGR.Core Assembly Assembly-CSharp.dll public class PanelReferences : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PanelReferences"
  },
  "api/WGR.Core.PlayerAnimations.html": {
    "href": "api/WGR.Core.PlayerAnimations.html",
    "title": "Class PlayerAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PlayerAnimations Namespace WGR.Core Assembly Assembly-CSharp.dll public class PlayerAnimations : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PlayerAnimations Methods GetAnimator() Call to get a player animator reference. public Animator GetAnimator() Returns Animator PlayDeathAnimation() Call to play the player death animation. public void PlayDeathAnimation() PlayKickAnimation() Call to play the player kick animation. public void PlayKickAnimation() PlayMeleeWeaponAnimation(WeaponType) public void PlayMeleeWeaponAnimation(WeaponType weaponType) Parameters weaponType WeaponType PlayThrowAnimation() Call to play the player throw animation. public void PlayThrowAnimation() PlayWakeUpAnimation() Call to play the player wake up animation. public void PlayWakeUpAnimation() SetRangedWeaponAnimation(bool) Call to set the isHoldingGun animator boolean value to the passed value. If the passed value is true, then force play the isHolding gun animation so we miss no frames. public void SetRangedWeaponAnimation(bool state) Parameters state bool SetWalkAnimationState(bool) Call to set the isWalking animator bool value to the passed value. public void SetWalkAnimationState(bool state) Parameters state bool ThrowAnimationEnd() ANIMATION EVENT Called when the player throw animation is finished to reset the animation boolean. public void ThrowAnimationEnd()"
  },
  "api/WGR.Core.PlayerController.html": {
    "href": "api/WGR.Core.PlayerController.html",
    "title": "Class PlayerController | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PlayerController Namespace WGR.Core Assembly Assembly-CSharp.dll public class PlayerController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PlayerController"
  },
  "api/WGR.Core.PlayerEntity.html": {
    "href": "api/WGR.Core.PlayerEntity.html",
    "title": "Class PlayerEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PlayerEntity Namespace WGR.Core Assembly Assembly-CSharp.dll public class PlayerEntity : Entity, IInteractable, IRewindable Inheritance object Object Component Behaviour MonoBehaviour Entity PlayerEntity Implements IInteractable IRewindable Inherited Members Entity.entityName Entity.entityLife Properties IsActive Everytime the value is set the OnPlayerDeactivate event gets invoked and passes the passed value. public bool IsActive { get; set; } Property Value bool IsDead If true adds +1 to the playe death value in the GameManager. public bool IsDead { get; set; } Property Value bool PlayerAnimations public PlayerAnimations PlayerAnimations { get; set; } Property Value PlayerAnimations PlayerController public PlayerController PlayerController { get; set; } Property Value PlayerController PlayerKick public PlayerKick PlayerKick { get; set; } Property Value PlayerKick PlayerShooting public PlayerAttack PlayerShooting { get; set; } Property Value PlayerAttack Methods AttackInteraction() Call to initiate the attack interaction of the player. If the player is marked dead then return. If there are rewind ability uses and the player dies then a rewind sequence gets initiated. If there are not, then the player dies and gets back to the player hub. public override void AttackInteraction() EnableUserControlOfPlayer() ANIMATION EVENT Called when the wake up animation finishes playing to reactivate the player controls. public void EnableUserControlOfPlayer() GetPosition() Call to get the current position of the player. public Vector3 GetPosition() Returns Vector3 OnPlayerStateChange(bool) public void OnPlayerStateChange(bool value) Parameters value bool SetPosition(Vector3) Call to set the current position of the player. If the player is marked dead, then return. public void SetPosition(Vector3 newPos) Parameters newPos Vector3 StunInteraction() Call to initiate the stun interaction of the entity. public override void StunInteraction() Events onPlayerStateChange PLAYER SYSTEM USE ONLY Subscribe to this event to get notified with the current player entity active state when it changes. public event Action<bool> onPlayerStateChange Event Type Action<bool>"
  },
  "api/WGR.Core.PlayerKick.html": {
    "href": "api/WGR.Core.PlayerKick.html",
    "title": "Class PlayerKick | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PlayerKick Namespace WGR.Core Assembly Assembly-CSharp.dll public class PlayerKick : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PlayerKick Properties IsKicking public bool IsKicking { get; set; } Property Value bool"
  },
  "api/WGR.Core.RewindTime.html": {
    "href": "api/WGR.Core.RewindTime.html",
    "title": "Class RewindTime | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class RewindTime Namespace WGR.Core Assembly Assembly-CSharp.dll public class RewindTime : Ability Inheritance object Ability RewindTime Inherited Members Ability.IsUnlocked Ability.CanActivate Ability.AbilitySprite Ability.AbilityName Ability.AbilityDescription Ability.AbilityTier Ability.MaxAbilityTier Ability.ActiveTime Ability.UsesPerLevel Ability.cachedUses Ability.timer Ability.Compare(Ability, Ability) Constructors RewindTime(string, int, Sprite, bool, Rewinder) public RewindTime(string name, int tier, Sprite abilitySprite, bool isUnlocked, Rewinder rewinder) Parameters name string tier int abilitySprite Sprite isUnlocked bool rewinder Rewinder Methods AbilityInfoFullReset() public override void AbilityInfoFullReset() DisableBehaviourOnSceneChange(GameScenes) public override void DisableBehaviourOnSceneChange(GameScenes scene) Parameters scene GameScenes EnableAbility() Call to set IsUnlocked and CanActivate to true. protected override void EnableAbility() GetCachedUses() public override int GetCachedUses() Returns int GetPointsForUpgrade() Returns the SkillPointsPerTier() value. public override int GetPointsForUpgrade() Returns int OnAbilityFinished() Call to reset the bullet speed and enemy behaviour, then call the OnRewindEnd() of the PlayerEntity. Sets canActivate to true. protected override void OnAbilityFinished() PlayAbilitySound() protected override void PlayAbilitySound() ResetAbilityUses() Call to Reset the ability uses per level. Called on PlayerHub return. public override void ResetAbilityUses() SkillPointsPerTier() Call to get the needed points to update the skill to the next tier. protected override int SkillPointsPerTier() Returns int An int representing the skill points needed to upgrade. Start(Action) Call to startup any basic ability behaviour Sets the stats based on the abiltiy tier, caches the uses per level and sets canActivate to true. public override void Start(Action callback) Parameters callback Action TryActivate() Call to Activate public override bool TryActivate() Returns bool UpdateAbilityTick() Call to update the ability info per frame (Used in MonoBehaviour Update()). The passed method gets called when the ability pre-requisites are met. public override void UpdateAbilityTick() UpdateStatsPerTier() Call after the construction of the Ability to set the ActiveTime and UsesPerLevel based on the ability tier. public override void UpdateStatsPerTier() UpgradeAbility() Call to increase the AbilityTier by 1 level only if the current AbilityTier is smaller than MaxAbilityTier. public override void UpgradeAbility()"
  },
  "api/WGR.Core.Rewinder.html": {
    "href": "api/WGR.Core.Rewinder.html",
    "title": "Class Rewinder | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Rewinder Namespace WGR.Core Assembly Assembly-CSharp.dll public class Rewinder : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Rewinder Properties CanRecord public bool CanRecord { get; set; } Property Value bool Methods RecordEntity(IRewindable, float) Call to start the entity position storing. Stores the entity passed. public void RecordEntity(IRewindable entity, float abilityRecordDuration) Parameters entity IRewindable The gameObject to store. abilityRecordDuration float How long does the storing lasts. ResetRewinderBehaviour() Call to set CanRecord to true. public void ResetRewinderBehaviour() RewindEntity(IRewindable, Action) Call to move the passed entity back to its original position. public void RewindEntity(IRewindable entity, Action externalCallback) Parameters entity IRewindable The entity to move externalCallback Action The method to call when the rewind ends."
  },
  "api/WGR.Core.SaveDataHandler.html": {
    "href": "api/WGR.Core.SaveDataHandler.html",
    "title": "Class SaveDataHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class SaveDataHandler Namespace WGR.Core Assembly Assembly-CSharp.dll public class SaveDataHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SaveDataHandler Methods GetSaveFileInfo() Call to get the currently saveData value. public SaveDataInfo GetSaveFileInfo() Returns SaveDataInfo HasSavedBefore() Returns the hasSaved value. public bool HasSavedBefore() Returns bool OverwriteSaveFile() Call to delete the save data file in the users documents. Invokes GameEventHandler.OnSaveOvewrite() and sets saveData field to null. public void OverwriteSaveFile() SaveGame() Call to read the appropriate in-game values, populate the SaveDataInfo class and then write the json string into the save data file. public void SaveGame()"
  },
  "api/WGR.Core.SaveDataInfo.html": {
    "href": "api/WGR.Core.SaveDataInfo.html",
    "title": "Class SaveDataInfo | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class SaveDataInfo Namespace WGR.Core Assembly Assembly-CSharp.dll public class SaveDataInfo Inheritance object SaveDataInfo Fields AbilityTiersInOrder public int[] AbilityTiersInOrder Field Value int[] GunKillsInOrder public int[] GunKillsInOrder Field Value int[] PlayerDeaths public int PlayerDeaths Field Value int RemainingSkillPoints public int RemainingSkillPoints Field Value int"
  },
  "api/WGR.Core.SceneFader.html": {
    "href": "api/WGR.Core.SceneFader.html",
    "title": "Class SceneFader | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class SceneFader Namespace WGR.Core Assembly Assembly-CSharp.dll public class SceneFader : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SceneFader Methods FadeIn() Call to play the FadeIn fader animation. public void FadeIn() FadeOut() Call to play the FadeOut fader animation. public void FadeOut()"
  },
  "api/WGR.Core.ScriptedSequence.html": {
    "href": "api/WGR.Core.ScriptedSequence.html",
    "title": "Class ScriptedSequence | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ScriptedSequence Namespace WGR.Core Assembly Assembly-CSharp.dll This class is used for better sentence-icon handling in the inspector. public class ScriptedSequence Inheritance object ScriptedSequence Fields imagePerSentence public List<Sprite> imagePerSentence Field Value List<Sprite> sentences public List<string> sentences Field Value List<string>"
  },
  "api/WGR.Core.SkillPointHandle.html": {
    "href": "api/WGR.Core.SkillPointHandle.html",
    "title": "Class SkillPointHandle | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class SkillPointHandle Namespace WGR.Core Assembly Assembly-CSharp.dll public class SkillPointHandle : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SkillPointHandle Methods DecreaseSkillPoints(int) Call to Decrease the skill point value by the passed value. Called from each player ability when they succesfully update. public void DecreaseSkillPoints(int value) Parameters value int RemainingSkillPoints() Call to get the availableSkillPoints count. public int RemainingSkillPoints() Returns int SetSkillPoints(int) Call to set the availableSkillPoints to the passed value. To-be-used with json loading. public void SetSkillPoints(int value) Parameters value int"
  },
  "api/WGR.Core.SlowDownTime.html": {
    "href": "api/WGR.Core.SlowDownTime.html",
    "title": "Class SlowDownTime | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class SlowDownTime Namespace WGR.Core Assembly Assembly-CSharp.dll public class SlowDownTime : Ability Inheritance object Ability SlowDownTime Inherited Members Ability.IsUnlocked Ability.CanActivate Ability.AbilitySprite Ability.AbilityName Ability.AbilityDescription Ability.AbilityTier Ability.MaxAbilityTier Ability.ActiveTime Ability.UsesPerLevel Ability.cachedUses Ability.timer Ability.Compare(Ability, Ability) Constructors SlowDownTime(string, int, Sprite, bool) public SlowDownTime(string name, int tier, Sprite abilitySprite, bool isUnlocked) Parameters name string tier int abilitySprite Sprite isUnlocked bool Methods AbilityInfoFullReset() public override void AbilityInfoFullReset() DisableBehaviourOnSceneChange(GameScenes) public override void DisableBehaviourOnSceneChange(GameScenes scene) Parameters scene GameScenes EnableAbility() Call to set IsUnlocked and CanActivate to true. protected override void EnableAbility() GetCachedUses() public override int GetCachedUses() Returns int GetPointsForUpgrade() Returns the SkillPointsPerTier() value. public override int GetPointsForUpgrade() Returns int OnAbilityFinished() Called when the ability timer has reached zero to revert back any changes the abiltiy has made. protected override void OnAbilityFinished() PlayAbilitySound() protected override void PlayAbilitySound() ResetAbilityUses() Call to Reset the ability uses per level. Called on PlayerHub return. public override void ResetAbilityUses() SkillPointsPerTier() Call to get the needed points to update the skill to the next tier. protected override int SkillPointsPerTier() Returns int An int representing the skill points needed to upgrade. Start(Action) Call to startup any basic ability behaviour Sets the stats based on the abiltiy tier, caches the uses per level and sets canActivate to true. public override void Start(Action callback) Parameters callback Action TryActivate() Call to Activate the ability behaviour. public override bool TryActivate() Returns bool UpdateAbilityTick() Call to update the tick of the ability script, just like running an Update() from MonoBehaviour. public override void UpdateAbilityTick() UpdateStatsPerTier() Call after the construction of the Ability to set the ActiveTime and UsesPerLevel based on the ability tier. public override void UpdateStatsPerTier() UpgradeAbility() Call to increase the AbilityTier by 1 level only if the current AbilityTier is smaller than MaxAbilityTier. public override void UpgradeAbility()"
  },
  "api/WGR.Core.Stat-1.html": {
    "href": "api/WGR.Core.Stat-1.html",
    "title": "Class Stat<T> | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Stat<T> Namespace WGR.Core Assembly Assembly-CSharp.dll public class Stat<T> Type Parameters T Inheritance object Stat<T> Methods GetValue() public T GetValue() Returns T SetValue(T) public void SetValue(T value) Parameters value T ToString() public override string ToString() Returns string"
  },
  "api/WGR.Core.StopTime.html": {
    "href": "api/WGR.Core.StopTime.html",
    "title": "Class StopTime | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class StopTime Namespace WGR.Core Assembly Assembly-CSharp.dll public class StopTime : Ability Inheritance object Ability StopTime Inherited Members Ability.IsUnlocked Ability.CanActivate Ability.AbilitySprite Ability.AbilityName Ability.AbilityDescription Ability.AbilityTier Ability.MaxAbilityTier Ability.ActiveTime Ability.UsesPerLevel Ability.cachedUses Ability.timer Ability.Compare(Ability, Ability) Constructors StopTime(string, int, Sprite, bool) public StopTime(string name, int tier, Sprite abilitySprite, bool isUnlocked) Parameters name string tier int abilitySprite Sprite isUnlocked bool Methods AbilityInfoFullReset() public override void AbilityInfoFullReset() DisableBehaviourOnSceneChange(GameScenes) public override void DisableBehaviourOnSceneChange(GameScenes scene) Parameters scene GameScenes EnableAbility() Call to set IsUnlocked and CanActivate to true. protected override void EnableAbility() GetCachedUses() public override int GetCachedUses() Returns int GetPointsForUpgrade() Returns the SkillPointsPerTier() value. public override int GetPointsForUpgrade() Returns int OnAbilityFinished() Called when the ability timer has reached zero to revert back any changes the abiltiy has made. protected override void OnAbilityFinished() PlayAbilitySound() protected override void PlayAbilitySound() ResetAbilityUses() Call to Reset the ability uses per level. Called on PlayerHub return. public override void ResetAbilityUses() SkillPointsPerTier() Call to get the needed points to update the skill to the next tier. protected override int SkillPointsPerTier() Returns int An int representing the skill points needed to upgrade. Start(Action) Call to startup any basic ability behaviour Sets the stats based on the abiltiy tier, caches the uses per level and sets canActivate to true. public override void Start(Action callback) Parameters callback Action TryActivate() Call to Activate the ability behaviour. public override bool TryActivate() Returns bool UpdateAbilityTick() Call to update the tick of the ability script, just like running an Update() from MonoBehaviour. public override void UpdateAbilityTick() UpdateStatsPerTier() Call after the construction of the Ability to set the ActiveTime and UsesPerLevel based on the ability tier. public override void UpdateStatsPerTier() UpgradeAbility() Call to increase the AbilityTier by 1 level only if the current AbilityTier is smaller than MaxAbilityTier. public override void UpgradeAbility()"
  },
  "api/WGR.Core.ThrowWeaponSequence.html": {
    "href": "api/WGR.Core.ThrowWeaponSequence.html",
    "title": "Class ThrowWeaponSequence | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ThrowWeaponSequence Namespace WGR.Core Assembly Assembly-CSharp.dll public class ThrowWeaponSequence : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ThrowWeaponSequence"
  },
  "api/WGR.Core.ThrowableSpeeds.html": {
    "href": "api/WGR.Core.ThrowableSpeeds.html",
    "title": "Class ThrowableSpeeds | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ThrowableSpeeds Namespace WGR.Core Assembly Assembly-CSharp.dll A static class containing every speed a throwable can use. public static class ThrowableSpeeds Inheritance object ThrowableSpeeds Fields RewindTimeRotation public static readonly float RewindTimeRotation Field Value float RewindTimeSpeed public static readonly float RewindTimeSpeed Field Value float SlowDownRotation public static readonly float SlowDownRotation Field Value float SlowDownSpeed public static readonly float SlowDownSpeed Field Value float StopTimeRotation public static readonly float StopTimeRotation Field Value float StopTimeSpeed public static readonly float StopTimeSpeed Field Value float"
  },
  "api/WGR.Core.TransitLevel.html": {
    "href": "api/WGR.Core.TransitLevel.html",
    "title": "Class TransitLevel | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class TransitLevel Namespace WGR.Core Assembly Assembly-CSharp.dll public class TransitLevel : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TransitLevel Methods EnableLevelTransition() Call to disable the elevator blocker sprite (if enabled), play the ambience music and the elevator SFX. Sets canTransit to true. Does not work in LEVEL5 because level transitioning is activated by BossStunnedSequence script. public void EnableLevelTransition()"
  },
  "api/WGR.Core.UIPanel.html": {
    "href": "api/WGR.Core.UIPanel.html",
    "title": "Enum UIPanel | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum UIPanel Namespace WGR.Core Assembly Assembly-CSharp.dll All the available in-game UI panels that can be activated. public enum UIPanel Fields AbilitiesPanel = 4 AchievementsPanel = 6 DialogueBox = 7 MainMenuPanel = 0 PauseMenu = 1 PlayerInfo = 2 SaveDeletion = 8 StartWeaponPanel = 5 VisualsPanel = 3"
  },
  "api/WGR.Core.UI_Manager.html": {
    "href": "api/WGR.Core.UI_Manager.html",
    "title": "Class UI_Manager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class UI_Manager Namespace WGR.Core Assembly Assembly-CSharp.dll public class UI_Manager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UI_Manager Properties IsPaused public bool IsPaused { get; } Property Value bool PlayerHubPanelActive public bool PlayerHubPanelActive { get; set; } Property Value bool UserUIHandle public HandleAbilityUpdatePanel UserUIHandle { get; set; } Property Value HandleAbilityUpdatePanel Methods DisablePanel(UIPanel) Call to disable the passed UI panel. public void DisablePanel(UIPanel panel) Parameters panel UIPanel EnablePanel(UIPanel) Call to enable the passed UI panel. public void EnablePanel(UIPanel panel) Parameters panel UIPanel GetInfoTextBoxPanel() public GameObject GetInfoTextBoxPanel() Returns GameObject SetContinueFromPauseScreenButton(Button) public void SetContinueFromPauseScreenButton(Button button) Parameters button Button SetQuitFromPauseScreenButton(Button) Call to set the quitGameFromPause button to the passed reference. public void SetQuitFromPauseScreenButton(Button button) Parameters button Button SetUIPanels(List<GameObject>) Call to set the uiPanels list to the passed reference. public void SetUIPanels(List<GameObject> panels) Parameters panels List<GameObject>"
  },
  "api/WGR.Core.UpdateSoundUIReferences.html": {
    "href": "api/WGR.Core.UpdateSoundUIReferences.html",
    "title": "Class UpdateSoundUIReferences | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class UpdateSoundUIReferences Namespace WGR.Core Assembly Assembly-CSharp.dll public class UpdateSoundUIReferences : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UpdateSoundUIReferences"
  },
  "api/WGR.Core.UserHUDHandler.html": {
    "href": "api/WGR.Core.UserHUDHandler.html",
    "title": "Class UserHUDHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class UserHUDHandler Namespace WGR.Core Assembly Assembly-CSharp.dll public class UserHUDHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UserHUDHandler Methods ChangeBulletsLeft(string) Call to set the remainingBullets text to the passed value. public void ChangeBulletsLeft(string bulletsLeft) Parameters bulletsLeft string ChangeSelectedAbilityIcon(Sprite, int, bool) Call to change all the sprites of the selectedAbilityIcons list to the passed abilityIcon sprite. Invokes SetPreviousAndNextAbilityIcons(...) to visualise the ability circle based on the current selected ability. public void ChangeSelectedAbilityIcon(Sprite abilityIcon, int currentAbilityIndex, bool unlocked) Parameters abilityIcon Sprite The selected ability icon. currentAbilityIndex int The selected ability index (based on AbilityManager indexing) unlocked bool The IsUnlocked ability field. ChangeWeaponInfo(Sprite) Call to set the bulletTypeImage to the passed ammoSprite. If ammoSprite is left to null then the sprites' alpha value is set to 0. public void ChangeWeaponInfo(Sprite ammoSprite = null) Parameters ammoSprite Sprite UpdateRemainingTimeIcon(float, float) Call to set the fill amount of the abilityCountdownSpriteIndex sprite inside the selectedAbilityIcons list to a value ratioed between 0-1 based on the remaing and total uses of an ability. public void UpdateRemainingTimeIcon(float remainingTime, float maxTime) Parameters remainingTime float maxTime float UpdateRemainingUsesIcon(int, int) Call to set the fill amount of the abilityFillSpriteIndex sprite inside the selectedAbilityIcons list to a value ratioed between 0-1 based on the remaing and total uses of an ability. public void UpdateRemainingUsesIcon(int remainingUses, int totalUses) Parameters remainingUses int totalUses int"
  },
  "api/WGR.Core.WeaponManager.html": {
    "href": "api/WGR.Core.WeaponManager.html",
    "title": "Class WeaponManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class WeaponManager Namespace WGR.Core Assembly Assembly-CSharp.dll public class WeaponManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour WeaponManager Properties WeaponKillCount public WeaponKillCount WeaponKillCount { get; } Property Value WeaponKillCount Methods CacheWeaponByType(WeaponType, GameObject) Call to cache the used weapon back in the appropriate Queue based on it's weaponType public void CacheWeaponByType(WeaponType type, GameObject weapon) Parameters type WeaponType weapon GameObject GetWeaponByType(WeaponType, int) Call to get a weapon prefab based on its weapon type public GameObject GetWeaponByType(WeaponType type, int playerBulletsLeft = -1) Parameters type WeaponType Which weapon prefab you want playerBulletsLeft int Returns GameObject A weapon prefab of the passed type GetWeaponSOsList() Call to get the weaponsToBeCounted list. public List<Weapon> GetWeaponSOsList() Returns List<Weapon> SetStartingWeaponOnPlayer(WeaponType) Call to find and invoke the PlayerEntity.PlayerShooting.SetWeaponInfo(...) method to set the equiped weapon to the passed weapon type. Called from a WeaponRepresenter instance when the player presses a weapon select button. public void SetStartingWeaponOnPlayer(WeaponType type) Parameters type WeaponType"
  },
  "api/WGR.Core.WeaponRepresenter.html": {
    "href": "api/WGR.Core.WeaponRepresenter.html",
    "title": "Class WeaponRepresenter | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class WeaponRepresenter Namespace WGR.Core Assembly Assembly-CSharp.dll public class WeaponRepresenter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour WeaponRepresenter Methods DeselectWeaponButton(Button) public void DeselectWeaponButton(Button selectedButton) Parameters selectedButton Button SetButtonWeaponType(WeaponType) Call to set the buttonType value of this scripts instance to the passed value. public void SetButtonWeaponType(WeaponType type) Parameters type WeaponType"
  },
  "api/WGR.Core.WeaponSelectionUI.html": {
    "href": "api/WGR.Core.WeaponSelectionUI.html",
    "title": "Class WeaponSelectionUI | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class WeaponSelectionUI Namespace WGR.Core Assembly Assembly-CSharp.dll public class WeaponSelectionUI : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour WeaponSelectionUI Methods DeselectAllButtonsButSelected(Button) Call to iterate throughout the weaponButtons list and call the DeselectWeaponButton(...) of each WeaponRepresenter instance. Passes the passed selectedButton value to the DeselectWeaponButton method parameter. public void DeselectAllButtonsButSelected(Button selectedButton) Parameters selectedButton Button SetStartingWeapon(WeaponType) Call to check if the currently passed weapon type is unlocked. If true, then calls the WeaponManager.SetStartingWeaponOnPlayer(...) and passes the passed weapon type. public void SetStartingWeapon(WeaponType type) Parameters type WeaponType The weapon type to check for."
  },
  "api/WGR.Core.html": {
    "href": "api/WGR.Core.html",
    "title": "Namespace WGR.Core | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.Core Classes AIEntityManager Ability AbilityManager AbilityTVActivator ActivateAbilityTest BossStunnedSequence ButtonPrompt CameraBehaviour DialogueController DialogueOnTriggerEnter DisplayTooltip DoorKickable DynamicCrosshair EnemyKickable Entity GameEventsHandler GameManager GameSoundsHandler HandleAbilityUpdatePanel HubPanelActivator IntroSceneSequencer KickableEntity LevelLoadPacket LevelManager MainMenuManager MoveToStart MurderPlayerSequencer OnMouseHover PanelReferences PlayerAnimations PlayerController PlayerEntity PlayerKick RewindTime Rewinder SaveDataHandler SaveDataInfo SceneFader ScriptedSequence This class is used for better sentence-icon handling in the inspector. SkillPointHandle SlowDownTime Stat<T> StopTime ThrowWeaponSequence ThrowableSpeeds A static class containing every speed a throwable can use. TransitLevel UI_Manager UpdateSoundUIReferences UserHUDHandler WeaponManager WeaponRepresenter WeaponSelectionUI Interfaces IInteractable IKickable IRewindable This interface can be attached to any gameObject to make it rewindable with the Rewind ability. Enums AbilityType All the available abilities the player has. GameAudioClip GameScenes All the game scenes enumerated for ease of access, the index MUST be the same as the build index. UIPanel All the available in-game UI panels that can be activated."
  },
  "api/WGR.Gameplay.AI.AIEntity.html": {
    "href": "api/WGR.Gameplay.AI.AIEntity.html",
    "title": "Class AIEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntity Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public abstract class AIEntity : Entity, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity AIEntity Implements IInteractable Derived BossEntity EnemyEntity Inherited Members Entity.entityName Entity.entityLife Entity.AttackInteraction() Entity.StunInteraction() Fields agent protected NavMeshAgent agent Field Value NavMeshAgent aiEntityWeapon protected AIEntityWeapon aiEntityWeapon Field Value AIEntityWeapon attackTarget protected Transform attackTarget Field Value Transform enemyRB protected Rigidbody enemyRB Field Value Rigidbody fovManager protected AIEntityFOVManager fovManager Field Value AIEntityFOVManager isAgentActive protected bool isAgentActive Field Value bool layerOnDeath protected EnemyLayer layerOnDeath Field Value EnemyLayer occlusionLayers public LayerMask occlusionLayers Field Value LayerMask Properties AIEntityWeapon public AIEntityWeapon AIEntityWeapon { get; protected set; } Property Value AIEntityWeapon FOVManager public AIEntityFOVManager FOVManager { get; protected set; } Property Value AIEntityFOVManager Methods CacheComponents() Call to cache the necessary entity components. protected abstract void CacheComponents() CheckIfDead() protected abstract bool CheckIfDead() Returns bool CreateBTHandler() protected abstract void CreateBTHandler() CreateNodeData() protected abstract void CreateNodeData() GetAgent() public abstract NavMeshAgent GetAgent() Returns NavMeshAgent GetEntityNodeData() public abstract INodeData GetEntityNodeData() Returns INodeData GetIsAgentActive() public abstract bool GetIsAgentActive() Returns bool GetIsDead() public abstract bool GetIsDead() Returns bool OnObserverDeath() public void OnObserverDeath() OnPlayerFound() public void OnPlayerFound() SetAttackTarget(Transform) public abstract void SetAttackTarget(Transform target) Parameters target Transform SetHealth(float) protected abstract void SetHealth(float value) Parameters value float SetIsAgentActive(bool) public abstract void SetIsAgentActive(bool value) Parameters value bool SetupNodeDataFields() protected abstract void SetupNodeDataFields() TargetFound() protected abstract void TargetFound() Events onObserverDeath public event Action onObserverDeath Event Type Action onPlayerFound public event Action onPlayerFound Event Type Action"
  },
  "api/WGR.Gameplay.AI.AIEntityAnimations.html": {
    "href": "api/WGR.Gameplay.AI.AIEntityAnimations.html",
    "title": "Class AIEntityAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityAnimations Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public abstract class AIEntityAnimations : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AIEntityAnimations Derived BossAnimations EnemyAnimations Methods GetAnimator() Call to get THIS AI entity animator reference. public abstract Animator GetAnimator() Returns Animator SetAnimatorPlaybackSpeed(float) Call to set THIS animators' playback speed to the passed value. public abstract void SetAnimatorPlaybackSpeed(float value) Parameters value float"
  },
  "api/WGR.Gameplay.AI.AIEntityBTHandler.html": {
    "href": "api/WGR.Gameplay.AI.AIEntityBTHandler.html",
    "title": "Class AIEntityBTHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityBTHandler Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public abstract class AIEntityBTHandler Inheritance object AIEntityBTHandler Derived BossBTHandler EnemyBTHandler Methods CreateBehaviourTree() Call to start this agents' Behaviour Tree creation. protected abstract void CreateBehaviourTree() UpdateBT() Call to update the agent Behaviour Tree from its root. public abstract void UpdateBT()"
  },
  "api/WGR.Gameplay.AI.AIEntityFOVDetector.html": {
    "href": "api/WGR.Gameplay.AI.AIEntityFOVDetector.html",
    "title": "Class AIEntityFOVDetector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityFOVDetector Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class AIEntityFOVDetector Inheritance object AIEntityFOVDetector Constructors AIEntityFOVDetector(AIEntityFOVManager, Transform, Color, Color, float, float, Vector3) Call to construct an AI Detector. public AIEntityFOVDetector(AIEntityFOVManager enemyFOVManager, Transform origin, Color radiusColor, Color frustrumColor, float maxAngle, float maxRadious, Vector3 rotation) Parameters enemyFOVManager AIEntityFOVManager This detectors' manager. origin Transform The center of the detector radiusColor Color The detectors' radius color. (Alpha set to 255f) frustrumColor Color The detectors' drustrum color. (Alpha set to 255f) maxAngle float The detectors' max frustrum angle (ie. 45 = 90 degrees.) maxRadious float The detectors' radius. rotation Vector3 The detector's facing direction. Methods IsEnabled(bool) Call to set the detector active state to the passed value. public void IsEnabled(bool state) Parameters state bool SetTarget(Transform) Call to set THIS detectors' target. public void SetTarget(Transform target) Parameters target Transform Update() public void Update()"
  },
  "api/WGR.Gameplay.AI.AIEntityFOVManager.html": {
    "href": "api/WGR.Gameplay.AI.AIEntityFOVManager.html",
    "title": "Class AIEntityFOVManager | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityFOVManager Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class AIEntityFOVManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AIEntityFOVManager Properties IsDetectorActive public bool IsDetectorActive { get; } Property Value bool Methods ActivateAllDetectors() Call to mark every Entity detector of THIS gameObject as active. If the enemy AI is marked as dead, then returns. public void ActivateAllDetectors() DeactivateAllDetectors() Call to mark every Entity detector of THIS gameObject as inactive. public void DeactivateAllDetectors() GetEnemyEntity() Call to get THIS FOV managers' enemy entity. public AIEntity GetEnemyEntity() Returns AIEntity"
  },
  "api/WGR.Gameplay.AI.AIEntityWeapon.html": {
    "href": "api/WGR.Gameplay.AI.AIEntityWeapon.html",
    "title": "Class AIEntityWeapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AIEntityWeapon Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public abstract class AIEntityWeapon : Shooter, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter AIEntityWeapon Implements IShooter Derived BossWeapon EnemyWeapon Inherited Members Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Fields burstTimerCache protected float burstTimerCache Field Value float enemyWeaponRenderer protected SpriteRenderer enemyWeaponRenderer Field Value SpriteRenderer onCooldown protected bool onCooldown Field Value bool projectilePerShotCache protected int projectilePerShotCache Field Value int projectilesPerShot protected int projectilesPerShot Field Value int shotBurstTimer protected float shotBurstTimer Field Value float shotCooldownInterval protected float shotCooldownInterval Field Value float totalBulletSpread protected float totalBulletSpread Field Value float Methods CanShoot() protected abstract bool CanShoot() Returns bool ClearWeaponSprite() Call to set the weaponSprite to null public abstract void ClearWeaponSprite() DecreaseSpread() Call to decrease totalBulletSpread by accuracyIncreaseRate protected abstract void DecreaseSpread() GetAIEntity() Call to get the AIEntity of THIS EnemyWeapon script. public abstract AIEntity GetAIEntity() Returns AIEntity GetFirepointTransform() Call to get the firePoint transform of THIS enemy. public abstract Transform GetFirepointTransform() Returns Transform GetWeaponRange() Call to get the equipedWeapon minimum shoot distance. public abstract float GetWeaponRange() Returns float OnShootReset() Call to reset the shooting specific variables (shootDoneTime + canShoot) protected abstract void OnShootReset() SetIsShooting(bool) Call to set isShooting to the passed value public abstract void SetIsShooting(bool value) Parameters value bool bool state SetStartDefaults() protected abstract void SetStartDefaults() SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public override abstract void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public override abstract void Shoot() ShootSequence() public abstract void ShootSequence() TypeBasedAttack() Call to initiate an attack sequence based on the equiped weapon WeaponCategory protected abstract void TypeBasedAttack()"
  },
  "api/WGR.Gameplay.AI.AttackTargetAction.html": {
    "href": "api/WGR.Gameplay.AI.AttackTargetAction.html",
    "title": "Class AttackTargetAction | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class AttackTargetAction Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class AttackTargetAction : INode Inheritance object AttackTargetAction Implements INode Constructors AttackTargetAction(INodeData, Action) public AttackTargetAction(INodeData nodeData, Action shootMethod) Parameters nodeData INodeData shootMethod Action Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to continuously rotate the agent towards the Target (through nodeData) and call its Action passed method. Always returns true. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.BehaviourTree.html": {
    "href": "api/WGR.Gameplay.AI.BehaviourTree.html",
    "title": "Class BehaviourTree | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BehaviourTree Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BehaviourTree : INode Inheritance object BehaviourTree Implements INode Constructors BehaviourTree(INode, INodeData) public BehaviourTree(INode root, INodeData nodeData) Parameters root INode nodeData INodeData Methods GetNodeData() Call to get the node data attached to THIS behaviou tree. public INodeData GetNodeData() Returns INodeData Run() Call to update the branches of the BT. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.BossAnimations.html": {
    "href": "api/WGR.Gameplay.AI.BossAnimations.html",
    "title": "Class BossAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossAnimations Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossAnimations : AIEntityAnimations Inheritance object Object Component Behaviour MonoBehaviour AIEntityAnimations BossAnimations Methods GetAnimator() Call to get THIS AI entity animator reference. public override Animator GetAnimator() Returns Animator PlayDeathAnimation() Call to play the death animation of the boss entity. public void PlayDeathAnimation() SetAnimatorPlaybackSpeed(float) Call to set THIS animators' playback speed to the passed value. public override void SetAnimatorPlaybackSpeed(float value) Parameters value float SetIsIdleState(bool) Call to set the idle animation state of the boss entity. public void SetIsIdleState(bool state) Parameters state bool"
  },
  "api/WGR.Gameplay.AI.BossBTHandler.html": {
    "href": "api/WGR.Gameplay.AI.BossBTHandler.html",
    "title": "Class BossBTHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossBTHandler Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossBTHandler : AIEntityBTHandler Inheritance object AIEntityBTHandler BossBTHandler Constructors BossBTHandler(BossNodeData, BossEntity) public BossBTHandler(BossNodeData bossNodeData, BossEntity bossEntity) Parameters bossNodeData BossNodeData bossEntity BossEntity Fields bossNodeData public BossNodeData bossNodeData Field Value BossNodeData Methods CreateBehaviourTree() Call to start this agents' Behaviour Tree creation. protected override void CreateBehaviourTree() UpdateBT() Call to update the agent Behaviour Tree from its root. public override void UpdateBT()"
  },
  "api/WGR.Gameplay.AI.BossEntity.html": {
    "href": "api/WGR.Gameplay.AI.BossEntity.html",
    "title": "Class BossEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossEntity Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossEntity : AIEntity, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity AIEntity BossEntity Implements IInteractable Inherited Members AIEntity.occlusionLayers AIEntity.layerOnDeath AIEntity.isAgentActive AIEntity.attackTarget AIEntity.enemyRB AIEntity.agent AIEntity.fovManager AIEntity.FOVManager AIEntity.aiEntityWeapon AIEntity.AIEntityWeapon AIEntity.onPlayerFound AIEntity.OnPlayerFound() AIEntity.onObserverDeath AIEntity.OnObserverDeath() Entity.entityName Entity.entityLife Properties BossAnimations public BossAnimations BossAnimations { get; } Property Value BossAnimations IsDead public bool IsDead { get; set; } Property Value bool Methods AttackInteraction() Call to decrease the boss health by one and increase his boss phase to the next phase. Moves the boss to his next phase hiding room and freezes the player. If the boss is stunned and gets attacked the bad ending sequence gets initiated. All enemies are killed if the boss enters his stunned state. public override void AttackInteraction() CacheComponents() Call to cache the necessary entity components. protected override void CacheComponents() CheckIfDead() Call to check the entity life value. protected override bool CheckIfDead() Returns bool True if entityLife is smaller than 0, false otherwise. CreateBTHandler() Call to create an instance of BossBTHandler and assign it to the btHandler varable. protected override void CreateBTHandler() CreateNodeData() Call to create the behaviour tree data container for THIS enemy entity. Creates a new BossNodeData instance and assigns it in the bossNodeData variable. protected override void CreateNodeData() EnableBossEntryAttacking() Call to enable the boss attack behvaiour. public void EnableBossEntryAttacking() GetAgent() Call to get the NavMeshAgent component reference. public override NavMeshAgent GetAgent() Returns NavMeshAgent GetEntityNodeData() Call to get the node data of THIS entity. public override INodeData GetEntityNodeData() Returns INodeData GetIsAgentActive() Call to get the agents' current state. public override bool GetIsAgentActive() Returns bool GetIsDead() Call to get the agents' is dead value. public override bool GetIsDead() Returns bool OnBossStunEnd() Call to disable the boss behaviour and invoke the: GameEventHandler.OnBossStunnedPhase event GameSoundsHandler.ForcePlayBossStunnedMusic method. public void OnBossStunEnd() SetAttackTarget(Transform) Called from the EnemyEntityManager at startup to update the target of THIS enemy. public override void SetAttackTarget(Transform target) Parameters target Transform SetHealth(float) Call to set the entityLife to the passed value. protected override void SetHealth(float value) Parameters value float SetIsAgentActive(bool) Call to set the agent is active to the passed value. public override void SetIsAgentActive(bool value) Parameters value bool SetupNodeDataFields() Call to set up the needed node data fields for correct startup agent behaviour. protected override void SetupNodeDataFields() StunInteraction() Boss is not stunable, nothing happens. Call to play a punch SFX. public override void StunInteraction() TargetFound() Call to set the agent node data target found value to true. protected override void TargetFound()"
  },
  "api/WGR.Gameplay.AI.BossEntrySequence.html": {
    "href": "api/WGR.Gameplay.AI.BossEntrySequence.html",
    "title": "Class BossEntrySequence | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossEntrySequence Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossEntrySequence : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BossEntrySequence"
  },
  "api/WGR.Gameplay.AI.BossLevelEnemyCounter.html": {
    "href": "api/WGR.Gameplay.AI.BossLevelEnemyCounter.html",
    "title": "Class BossLevelEnemyCounter | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossLevelEnemyCounter Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossLevelEnemyCounter : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BossLevelEnemyCounter"
  },
  "api/WGR.Gameplay.AI.BossNodeData.html": {
    "href": "api/WGR.Gameplay.AI.BossNodeData.html",
    "title": "Class BossNodeData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossNodeData Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossNodeData : INodeData Inheritance object BossNodeData Implements INodeData Methods GetCanShoot() public bool GetCanShoot() Returns bool GetCurrentBossPhase() public BossPhase GetCurrentBossPhase() Returns BossPhase GetCurrentHideRoom() public Transform GetCurrentHideRoom() Returns Transform GetEnemyAnimations() public BossAnimations GetEnemyAnimations() Returns BossAnimations GetEnemyEntity() public BossEntity GetEnemyEntity() Returns BossEntity GetIsDead() public bool GetIsDead() Returns bool GetIsHiding() public bool GetIsHiding() Returns bool GetIsStunned() public bool GetIsStunned() Returns bool GetNavMeshAgent() public NavMeshAgent GetNavMeshAgent() Returns NavMeshAgent GetOcclusionLayers() public LayerMask GetOcclusionLayers() Returns LayerMask GetOriginalPos() public Vector3 GetOriginalPos() Returns Vector3 GetTarget() public Transform GetTarget() Returns Transform GetTargetFound() public bool GetTargetFound() Returns bool GetTargetIsDead() public bool GetTargetIsDead() Returns bool GetWeaponRange() public float GetWeaponRange() Returns float SetCanShoot(bool) public void SetCanShoot(bool value) Parameters value bool SetCurrentBossPhase(BossPhase) public void SetCurrentBossPhase(BossPhase bossPhase) Parameters bossPhase BossPhase SetCurrentHideRoom(Transform) public void SetCurrentHideRoom(Transform transform) Parameters transform Transform SetEnemyAnimations(BossAnimations) public void SetEnemyAnimations(BossAnimations value) Parameters value BossAnimations SetEnemyEntity(BossEntity) public void SetEnemyEntity(BossEntity value) Parameters value BossEntity SetIsDead(bool) public void SetIsDead(bool value) Parameters value bool SetIsHiding(bool) public void SetIsHiding(bool value) Parameters value bool SetIsStunned(bool) public void SetIsStunned(bool value) Parameters value bool SetNavMeshAgent(NavMeshAgent) public void SetNavMeshAgent(NavMeshAgent value) Parameters value NavMeshAgent SetOcclusionLayers(LayerMask) public void SetOcclusionLayers(LayerMask value) Parameters value LayerMask SetOriginalPos(Vector3) public void SetOriginalPos(Vector3 pos) Parameters pos Vector3 SetTarget(Transform) public void SetTarget(Transform value) Parameters value Transform SetTargetFound(bool) public void SetTargetFound(bool value) Parameters value bool SetTargetIsDead(bool) public void SetTargetIsDead(bool value) Parameters value bool SetWeaponRange(float) public void SetWeaponRange(float value) Parameters value float"
  },
  "api/WGR.Gameplay.AI.BossPhase.html": {
    "href": "api/WGR.Gameplay.AI.BossPhase.html",
    "title": "Enum BossPhase | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum BossPhase Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll All the available boss phases. public enum BossPhase Fields BedroomPhase = 2 BudhaRoomPhase = 1 StartingPhase = 0 StunnedPhase = 3"
  },
  "api/WGR.Gameplay.AI.BossPhaseSelector.html": {
    "href": "api/WGR.Gameplay.AI.BossPhaseSelector.html",
    "title": "Class BossPhaseSelector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossPhaseSelector Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossPhaseSelector : INode Inheritance object BossPhaseSelector Implements INode Constructors BossPhaseSelector(BossNodeData, INode[]) public BossPhaseSelector(BossNodeData bossNodeData, INode[] phasesInOrder) Parameters bossNodeData BossNodeData phasesInOrder INode[] Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to switch between different boss phase behaviours based on the Current Boss Phase value. public bool Run() Returns bool Updates the phase Run and returns its return value."
  },
  "api/WGR.Gameplay.AI.BossPhaseUpdater.html": {
    "href": "api/WGR.Gameplay.AI.BossPhaseUpdater.html",
    "title": "Class BossPhaseUpdater | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossPhaseUpdater Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossPhaseUpdater : INode Inheritance object BossPhaseUpdater Implements INode Constructors BossPhaseUpdater(BossNodeData, INode) public BossPhaseUpdater(BossNodeData bossNodeData, INode phaseBehaviour) Parameters bossNodeData BossNodeData phaseBehaviour INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to update the node behaviour. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.BossStunnedPhase.html": {
    "href": "api/WGR.Gameplay.AI.BossStunnedPhase.html",
    "title": "Class BossStunnedPhase | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossStunnedPhase Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossStunnedPhase : INode Inheritance object BossStunnedPhase Implements INode Constructors BossStunnedPhase(BossNodeData, Action) public BossStunnedPhase(BossNodeData bossNodeData, Action callbackOnStunEnd) Parameters bossNodeData BossNodeData callbackOnStunEnd Action Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Sends the boss back to his last room position, if he's nearing his room position the callbackOnStunEnd Action gets called. public bool Run() Returns bool False if the boss is nto stunned, true when he is stunned and in his room position."
  },
  "api/WGR.Gameplay.AI.BossWeapon.html": {
    "href": "api/WGR.Gameplay.AI.BossWeapon.html",
    "title": "Class BossWeapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BossWeapon Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BossWeapon : AIEntityWeapon, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter AIEntityWeapon BossWeapon Implements IShooter Inherited Members AIEntityWeapon.projectilesPerShot AIEntityWeapon.shotCooldownInterval AIEntityWeapon.enemyWeaponRenderer AIEntityWeapon.onCooldown AIEntityWeapon.shotBurstTimer AIEntityWeapon.burstTimerCache AIEntityWeapon.projectilePerShotCache AIEntityWeapon.totalBulletSpread Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Methods CanShoot() Call to check if the boss can shoot his next bullet again. protected override bool CanShoot() Returns bool ClearWeaponSprite() Call to set the weaponSprite to null public override void ClearWeaponSprite() DecreaseSpread() Call to decrease totalBulletSpread by accuracyIncreaseRate protected override void DecreaseSpread() GetAIEntity() Call to get the AIEntity of THIS EnemyWeapon script. public override AIEntity GetAIEntity() Returns AIEntity GetFirepointTransform() Call to get the firePoint transform of THIS enemy. public override Transform GetFirepointTransform() Returns Transform GetWeaponRange() Call to get the equipedWeapon minimum shoot distance. public override float GetWeaponRange() Returns float OnShootReset() Call to reset the shooting specific variables (shootDoneTime + canShoot) protected override void OnShootReset() SetIsShooting(bool) Call to set isShooting to the passed value public override void SetIsShooting(bool value) Parameters value bool bool state SetStartDefaults() Call to set the default attacking values. protected override void SetStartDefaults() SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public override void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public override void Shoot() ShootSequence() Call to initiate the Boss Shoot sequence. Acts as an update too when called from the enemyBT .Run() public override void ShootSequence() TypeBasedAttack() Call to initiate an attack sequence based on the equiped weapon WeaponCategory protected override void TypeBasedAttack()"
  },
  "api/WGR.Gameplay.AI.BulletDetector.html": {
    "href": "api/WGR.Gameplay.AI.BulletDetector.html",
    "title": "Class BulletDetector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BulletDetector Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class BulletDetector : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BulletDetector Fields IsActive public bool IsActive Field Value bool"
  },
  "api/WGR.Gameplay.AI.ChaseAttackSelector.html": {
    "href": "api/WGR.Gameplay.AI.ChaseAttackSelector.html",
    "title": "Class ChaseAttackSelector | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ChaseAttackSelector Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class ChaseAttackSelector : INode Inheritance object ChaseAttackSelector Implements INode Constructors ChaseAttackSelector(INodeData, NavToTarget, AttackTargetAction) public ChaseAttackSelector(INodeData nodeData, NavToTarget navToTarget, AttackTargetAction attackTarget) Parameters nodeData INodeData navToTarget NavToTarget attackTarget AttackTargetAction Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() If the NavToTarget Run method returns false, calls and returns the AttackTargetAction Run method value. Returns false if none of the above apply. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.ChaseTargetActivator.html": {
    "href": "api/WGR.Gameplay.AI.ChaseTargetActivator.html",
    "title": "Class ChaseTargetActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ChaseTargetActivator Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class ChaseTargetActivator : INode Inheritance object ChaseTargetActivator Implements INode Constructors ChaseTargetActivator(INodeData, ChaseAttackSelector) public ChaseTargetActivator(INodeData nodeData, ChaseAttackSelector chaseTarget) Parameters nodeData INodeData chaseTarget ChaseAttackSelector Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the nodeData target has been marked as found. If yes, Run and return the ChaseAttackSelector return value. Else return false. If the agent nodeData CanShoot value is false the node returns true. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.CheckIfDead.html": {
    "href": "api/WGR.Gameplay.AI.CheckIfDead.html",
    "title": "Class CheckIfDead | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class CheckIfDead Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class CheckIfDead : INode Inheritance object CheckIfDead Implements INode Constructors CheckIfDead(EnemyNodeData, INode) public CheckIfDead(EnemyNodeData nodeData, INode child) Parameters nodeData EnemyNodeData child INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to update the INode passed in the node constructor ONLY if the agent is not dead. Returns the INode passed return value. Returns false if none of the above apply. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.CheckIfStunned.html": {
    "href": "api/WGR.Gameplay.AI.CheckIfStunned.html",
    "title": "Class CheckIfStunned | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class CheckIfStunned Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class CheckIfStunned : INode Inheritance object CheckIfStunned Implements INode Constructors CheckIfStunned(EnemyNodeData, INode, INode) public CheckIfStunned(EnemyNodeData nodeData, INode stunedAction, INode mainBTEntry) Parameters nodeData EnemyNodeData stunedAction INode mainBTEntry INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent is marked as stunned. If true, run the mainBTEntry INode and return its return value. If false, run the stunnedAction INode and return its return value. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.EnemyAnimations.html": {
    "href": "api/WGR.Gameplay.AI.EnemyAnimations.html",
    "title": "Class EnemyAnimations | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyAnimations Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class EnemyAnimations : AIEntityAnimations Inheritance object Object Component Behaviour MonoBehaviour AIEntityAnimations EnemyAnimations Methods GetAnimator() Call to get THIS AI entity animator reference. public override Animator GetAnimator() Returns Animator PlayDeathAnimation() Call to play the death animation. public void PlayDeathAnimation() PlayMeleeAnimation(WeaponType) Plays the corresponding melee animation based on weapon type passed. public void PlayMeleeAnimation(WeaponType weaponType) Parameters weaponType WeaponType SetAnimatorPlaybackSpeed(float) Call to set THIS animators' playback speed to the passed value. public override void SetAnimatorPlaybackSpeed(float value) Parameters value float SetHoldingRangedWeaponState(bool) Call to activate the universal weapon holding stance of the enemy. public void SetHoldingRangedWeaponState(bool state) Parameters state bool SetStunnedAnimationState(bool) Call to play the stunned agent animation. public void SetStunnedAnimationState(bool state) Parameters state bool SetWalkStateAnimation(bool) Call to set the walking animation acitve state. public void SetWalkStateAnimation(bool state) Parameters state bool"
  },
  "api/WGR.Gameplay.AI.EnemyBTHandler.html": {
    "href": "api/WGR.Gameplay.AI.EnemyBTHandler.html",
    "title": "Class EnemyBTHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyBTHandler Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class EnemyBTHandler : AIEntityBTHandler Inheritance object AIEntityBTHandler EnemyBTHandler Constructors EnemyBTHandler(EnemyNodeData, EnemyEntity) public EnemyBTHandler(EnemyNodeData nodeData, EnemyEntity enemyEntity) Parameters nodeData EnemyNodeData enemyEntity EnemyEntity Fields nodeData public EnemyNodeData nodeData Field Value EnemyNodeData Methods CreateBehaviourTree() Call to start this agents' Behaviour Tree creation. protected override void CreateBehaviourTree() UpdateBT() Call to update the agent Behaviour Tree from its root. public override void UpdateBT()"
  },
  "api/WGR.Gameplay.AI.EnemyEntity.html": {
    "href": "api/WGR.Gameplay.AI.EnemyEntity.html",
    "title": "Class EnemyEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyEntity Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class EnemyEntity : AIEntity, IInteractable Inheritance object Object Component Behaviour MonoBehaviour Entity AIEntity EnemyEntity Implements IInteractable Inherited Members AIEntity.occlusionLayers AIEntity.layerOnDeath AIEntity.isAgentActive AIEntity.attackTarget AIEntity.enemyRB AIEntity.agent AIEntity.fovManager AIEntity.FOVManager AIEntity.aiEntityWeapon AIEntity.AIEntityWeapon AIEntity.onPlayerFound AIEntity.OnPlayerFound() AIEntity.onObserverDeath AIEntity.OnObserverDeath() Entity.entityName Entity.entityLife Properties EnemyAnimation public EnemyAnimations EnemyAnimation { get; } Property Value EnemyAnimations IsDead When set, IsDead automatically updates the enemyNodeData equivalent field with the passed value. If the value passed is true, instatiates a blood pool VFX. If the value passed is true AND the focused scene is the BOSS FIGHT, calls the GameEventHandler.OnBossLevelEnemyDeath event. public bool IsDead { get; set; } Property Value bool IsStunned public bool IsStunned { get; set; } Property Value bool Methods AttackInteraction() If the agent has armor, decrease its armor value by 1. If the agent ahs no armor left, decrease its life value by 1. Early return if the enemy is dead OR inactive. Calls CheckIfDead(), if true then calls InitiateDeathSequence(). public override void AttackInteraction() CacheComponents() Call to cache the necessary entity components. protected override void CacheComponents() CheckIfDead() Call to check the entity life value. protected override bool CheckIfDead() Returns bool True if entityLife is smaller than 0, false otherwise. CreateBTHandler() Call to create an instance of EnemyBTHandler and assign it to the btHandler varable. protected override void CreateBTHandler() CreateNodeData() Call to create the behaviour tree data container for THIS enemy entity. Creates a new EnemyNodeData instance and assigns it in the enemyNodeData variable. protected override void CreateNodeData() DisableShootingBehaviour() Call to set the enemyNodeData canShoot to false. public void DisableShootingBehaviour() GetAgent() Call to get the NavMeshAgent component reference. public override NavMeshAgent GetAgent() Returns NavMeshAgent GetEntityNodeData() Call to get the node data of THIS entity. public override INodeData GetEntityNodeData() Returns INodeData GetIsAgentActive() Call to get the agents' current state. public override bool GetIsAgentActive() Returns bool GetIsDead() Call to get the agents' is dead value. public override bool GetIsDead() Returns bool OnPlayerAbilityFinish() Called from each ability when the ability behaviour has finished executing to reset the agent values. public void OnPlayerAbilityFinish() OnPlayerAbilityStart(float) Call to set the animator playback speed to the passed value. public void OnPlayerAbilityStart(float animatorPlaybackSpeed) Parameters animatorPlaybackSpeed float SetAttackTarget(Transform) Called from the EnemyEntityManager at startup to update the target of THIS enemy. public override void SetAttackTarget(Transform target) Parameters target Transform SetHealth(float) Call to set the entityLife to the passed value. protected override void SetHealth(float value) Parameters value float SetIsAgentActive(bool) Call to set the agent is active to the passed value. public override void SetIsAgentActive(bool value) Parameters value bool SetupNodeDataFields() Call to set up the needed node data fields for correct startup agent behaviour. protected override void SetupNodeDataFields() StunInteraction() Call to play the the stunned agent animation. Set is stunned to true. Play the Punch SFX. public override void StunInteraction() TargetFound() Call to set the agent node data target found value to true. protected override void TargetFound()"
  },
  "api/WGR.Gameplay.AI.EnemyLayer.html": {
    "href": "api/WGR.Gameplay.AI.EnemyLayer.html",
    "title": "Enum EnemyLayer | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum EnemyLayer Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll All the available gameObject layers the enemy AI can exist on. public enum EnemyLayer Fields Enemy = 7 NonInteractive = 31"
  },
  "api/WGR.Gameplay.AI.EnemyNodeData.html": {
    "href": "api/WGR.Gameplay.AI.EnemyNodeData.html",
    "title": "Class EnemyNodeData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyNodeData Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class EnemyNodeData : INodeData Inheritance object EnemyNodeData Implements INodeData Methods GetAttackAfterStun() public bool GetAttackAfterStun() Returns bool GetCanShoot() public bool GetCanShoot() Returns bool GetCurrentWaypointIndex() public int GetCurrentWaypointIndex() Returns int GetEnemyAnimations() public EnemyAnimations GetEnemyAnimations() Returns EnemyAnimations GetEnemyEntity() public EnemyEntity GetEnemyEntity() Returns EnemyEntity GetIdleTimeOnPatrol() public float GetIdleTimeOnPatrol() Returns float GetIsDead() public bool GetIsDead() Returns bool GetIsPatroller() public bool GetIsPatroller() Returns bool GetIsStunned() public bool GetIsStunned() Returns bool GetNavMeshAgent() public NavMeshAgent GetNavMeshAgent() Returns NavMeshAgent GetOcclusionLayers() public LayerMask GetOcclusionLayers() Returns LayerMask GetOriginalPos() public Vector3 GetOriginalPos() Returns Vector3 GetTarget() public Transform GetTarget() Returns Transform GetTargetFound() public bool GetTargetFound() Returns bool GetTargetIsDead() public bool GetTargetIsDead() Returns bool GetWaypointDistanceOffset() public float GetWaypointDistanceOffset() Returns float GetWaypoints() public List<Transform> GetWaypoints() Returns List<Transform> GetWeaponRange() public float GetWeaponRange() Returns float SetAttackAfterStun(bool) public void SetAttackAfterStun(bool value) Parameters value bool SetCanShoot(bool) public void SetCanShoot(bool value) Parameters value bool SetCurrentWaypointIndex(int) public void SetCurrentWaypointIndex(int value) Parameters value int SetEnemyAnimations(EnemyAnimations) public void SetEnemyAnimations(EnemyAnimations value) Parameters value EnemyAnimations SetEnemyEntity(EnemyEntity) public void SetEnemyEntity(EnemyEntity value) Parameters value EnemyEntity SetIdleTimeOnPatrol(float) public void SetIdleTimeOnPatrol(float value) Parameters value float SetIsDead(bool) public void SetIsDead(bool value) Parameters value bool SetIsPatroller(bool) public void SetIsPatroller(bool value) Parameters value bool SetIsStunned(bool) public void SetIsStunned(bool value) Parameters value bool SetNavMeshAgent(NavMeshAgent) public void SetNavMeshAgent(NavMeshAgent value) Parameters value NavMeshAgent SetOcclusionLayers(LayerMask) public void SetOcclusionLayers(LayerMask value) Parameters value LayerMask SetOriginalPos(Vector3) public void SetOriginalPos(Vector3 pos) Parameters pos Vector3 SetTarget(Transform) public void SetTarget(Transform value) Parameters value Transform SetTargetFound(bool) public void SetTargetFound(bool value) Parameters value bool SetTargetIsDead(bool) public void SetTargetIsDead(bool value) Parameters value bool SetWaypointDistanceOffset(float) public void SetWaypointDistanceOffset(float value) Parameters value float SetWaypoints(List<Transform>) public void SetWaypoints(List<Transform> value) Parameters value List<Transform> SetWeaponRange(float) public void SetWeaponRange(float value) Parameters value float"
  },
  "api/WGR.Gameplay.AI.EnemySpawnHandler.html": {
    "href": "api/WGR.Gameplay.AI.EnemySpawnHandler.html",
    "title": "Class EnemySpawnHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemySpawnHandler Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class EnemySpawnHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour EnemySpawnHandler Methods EnableFinalBossRoom() Call to reveal the final boss room. public void EnableFinalBossRoom() SpawnBoss() Call to move the boss in the bossEntryPosition transform. public void SpawnBoss() SpawnEnemyWave() Call to move and activate the boss minions in front of the elevator. Reveals the first boss hiding room. public void SpawnEnemyWave()"
  },
  "api/WGR.Gameplay.AI.EnemyWeapon.html": {
    "href": "api/WGR.Gameplay.AI.EnemyWeapon.html",
    "title": "Class EnemyWeapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class EnemyWeapon Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class EnemyWeapon : AIEntityWeapon, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter AIEntityWeapon EnemyWeapon Implements IShooter Inherited Members AIEntityWeapon.projectilesPerShot AIEntityWeapon.shotCooldownInterval AIEntityWeapon.enemyWeaponRenderer AIEntityWeapon.onCooldown AIEntityWeapon.shotBurstTimer AIEntityWeapon.burstTimerCache AIEntityWeapon.projectilePerShotCache AIEntityWeapon.totalBulletSpread Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Methods CanShoot() Call to check if the enemy can shoot his next bullet again. protected override bool CanShoot() Returns bool ClearWeaponSprite() Call to set the weaponSprite to null public override void ClearWeaponSprite() DecreaseSpread() Call to decrease totalBulletSpread by accuracyIncreaseRate protected override void DecreaseSpread() GetAIEntity() Call to get the AIEntity of THIS EnemyWeapon script. public override AIEntity GetAIEntity() Returns AIEntity GetFirepointTransform() Call to get the firePoint transform of THIS enemy. public override Transform GetFirepointTransform() Returns Transform GetWeaponRange() Call to get the equipedWeapon minimum shoot distance. public override float GetWeaponRange() Returns float OnShootReset() Call to reset the shooting specific variables (shootDoneTime + canShoot) protected override void OnShootReset() SetIsShooting(bool) Call to set isShooting to the passed value public override void SetIsShooting(bool value) Parameters value bool bool state SetStartDefaults() Call to set the required startup default field values. protected override void SetStartDefaults() SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public override void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public override void Shoot() ShootSequence() Call to initiate the Enemy Shoot sequence. Acts as an update too when called from the enemyBT .Run() public override void ShootSequence() TypeBasedAttack() Call to initiate an attack sequence based on the equiped weapon WeaponCategory protected override void TypeBasedAttack()"
  },
  "api/WGR.Gameplay.AI.INode.html": {
    "href": "api/WGR.Gameplay.AI.INode.html",
    "title": "Interface INode | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface INode Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public interface INode Methods GetNodeData() Call to get the node data passed in the creation of the node. INodeData GetNodeData() Returns INodeData Run() Call to update the node behaviour. bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.INodeData.html": {
    "href": "api/WGR.Gameplay.AI.INodeData.html",
    "title": "Interface INodeData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface INodeData Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public interface INodeData Methods GetCanShoot() bool GetCanShoot() Returns bool GetNavMeshAgent() NavMeshAgent GetNavMeshAgent() Returns NavMeshAgent GetOcclusionLayers() LayerMask GetOcclusionLayers() Returns LayerMask GetOriginalPos() Vector3 GetOriginalPos() Returns Vector3 GetTarget() Transform GetTarget() Returns Transform GetTargetFound() bool GetTargetFound() Returns bool GetTargetIsDead() bool GetTargetIsDead() Returns bool GetWeaponRange() float GetWeaponRange() Returns float SetCanShoot(bool) void SetCanShoot(bool value) Parameters value bool SetNavMeshAgent(NavMeshAgent) void SetNavMeshAgent(NavMeshAgent agent) Parameters agent NavMeshAgent SetOcclusionLayers(LayerMask) void SetOcclusionLayers(LayerMask value) Parameters value LayerMask SetOriginalPos(Vector3) void SetOriginalPos(Vector3 pos) Parameters pos Vector3 SetTarget(Transform) void SetTarget(Transform target) Parameters target Transform SetTargetFound(bool) void SetTargetFound(bool value) Parameters value bool SetTargetIsDead(bool) void SetTargetIsDead(bool value) Parameters value bool SetWeaponRange(float) void SetWeaponRange(float value) Parameters value float"
  },
  "api/WGR.Gameplay.AI.IdleNode.html": {
    "href": "api/WGR.Gameplay.AI.IdleNode.html",
    "title": "Class IdleNode | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IdleNode Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class IdleNode : INode Inheritance object IdleNode Implements INode Constructors IdleNode(EnemyNodeData) public IdleNode(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Checks if the AI is a patroller through the NodeData passed. If false, sets their walk animation state to false and returns true, else returns false. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.IdleOnArrival.html": {
    "href": "api/WGR.Gameplay.AI.IdleOnArrival.html",
    "title": "Class IdleOnArrival | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IdleOnArrival Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class IdleOnArrival : INode Inheritance object IdleOnArrival Implements INode Constructors IdleOnArrival(EnemyNodeData) public IdleOnArrival(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Checks if enough time has passed based on the idle time while patrolling value. If true, sets the walking animation state to true and un-freezes the agent. Returns true. If false, sets the walking animation state to false and freezes the agent. Returns false. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.IdlePatrolChaseActivator.html": {
    "href": "api/WGR.Gameplay.AI.IdlePatrolChaseActivator.html",
    "title": "Class IdlePatrolChaseActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class IdlePatrolChaseActivator Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class IdlePatrolChaseActivator : INode Inheritance object IdlePatrolChaseActivator Implements INode Constructors IdlePatrolChaseActivator(EnemyNodeData, List<INode>) public IdlePatrolChaseActivator(EnemyNodeData nodeData, List<INode> children) Parameters nodeData EnemyNodeData children List<INode> Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to update the first branch that returns true from the passed list of INode children. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.NavToOriginalPos.html": {
    "href": "api/WGR.Gameplay.AI.NavToOriginalPos.html",
    "title": "Class NavToOriginalPos | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class NavToOriginalPos Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class NavToOriginalPos : INode Inheritance object NavToOriginalPos Implements INode Constructors NavToOriginalPos(INodeData, INode) public NavToOriginalPos(INodeData nodeData, INode nextNode) Parameters nodeData INodeData nextNode INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the target is marked as dead. If true, set the agents' current destination back to his spawn position and return true. If false, run the INode passed as nextNode and return its retun value. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.NavToRoom.html": {
    "href": "api/WGR.Gameplay.AI.NavToRoom.html",
    "title": "Class NavToRoom | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class NavToRoom Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class NavToRoom : INode Inheritance object NavToRoom Implements INode Constructors NavToRoom(BossNodeData, BossPhaseSelector) public NavToRoom(BossNodeData bossNodeData, BossPhaseSelector phaseSelector) Parameters bossNodeData BossNodeData phaseSelector BossPhaseSelector Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to send the agent to his current set room waypoint when he is in hiding mode. public bool Run() Returns bool True when he is in hiding mode and close to the waypoint. Else runs the BossPhaseSelector and returns its return value."
  },
  "api/WGR.Gameplay.AI.NavToTarget.html": {
    "href": "api/WGR.Gameplay.AI.NavToTarget.html",
    "title": "Class NavToTarget | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class NavToTarget Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class NavToTarget : INode Inheritance object NavToTarget Implements INode Constructors NavToTarget(INodeData) public NavToTarget(INodeData nodeData) Parameters nodeData INodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to set the agent destination to the currenty set Target transfrom (through the node data). When the target is inside attack range (nodeData.WeaponRange) the agent freezes and checks for occlusion based on the occlusion layers passed in node data. If the Occlusion check returns true, the agent unfreezes and the node returns true. Else, returns false without un-freezing. While the target is not inside attack range the node returns true. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.PatrolCheckDistance.html": {
    "href": "api/WGR.Gameplay.AI.PatrolCheckDistance.html",
    "title": "Class PatrolCheckDistance | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolCheckDistance Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class PatrolCheckDistance : INode Inheritance object PatrolCheckDistance Implements INode Constructors PatrolCheckDistance(EnemyNodeData, IdleOnArrival) public PatrolCheckDistance(EnemyNodeData nodeData, IdleOnArrival idleNode) Parameters nodeData EnemyNodeData idleNode IdleOnArrival Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent is nearing the currently set waypoint based on the node data set offset float. When true, run the idleNode (IdleOnArrival INode) and return its return value. Increments the current waypoint index. When the idleNode returns false, THIS node returns false. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.PatrolNavToActivator.html": {
    "href": "api/WGR.Gameplay.AI.PatrolNavToActivator.html",
    "title": "Class PatrolNavToActivator | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolNavToActivator Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class PatrolNavToActivator : INode Inheritance object PatrolNavToActivator Implements INode Constructors PatrolNavToActivator(EnemyNodeData, PatrolNavigateTo) public PatrolNavToActivator(EnemyNodeData nodeData, PatrolNavigateTo navTo) Parameters nodeData EnemyNodeData navTo PatrolNavigateTo Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent is in the currently set waypoint (through his nodeData). If true, returns false. If false, call the Run method of the navTo (PatrolNavigateTo INode) and return its return value. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.PatrolNavigateTo.html": {
    "href": "api/WGR.Gameplay.AI.PatrolNavigateTo.html",
    "title": "Class PatrolNavigateTo | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolNavigateTo Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class PatrolNavigateTo : INode Inheritance object PatrolNavigateTo Implements INode Constructors PatrolNavigateTo(EnemyNodeData) public PatrolNavigateTo(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to set the agent stoppin distance to 0, navigate him to the currently set waypoint (through his node data) and set its walk animation state to true. Always returns true. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.PatrolNode.html": {
    "href": "api/WGR.Gameplay.AI.PatrolNode.html",
    "title": "Class PatrolNode | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PatrolNode Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class PatrolNode : INode Inheritance object PatrolNode Implements INode Constructors PatrolNode(EnemyNodeData, INode, INode) public PatrolNode(EnemyNodeData nodeData, INode distanceCheck, INode navTo) Parameters nodeData EnemyNodeData distanceCheck INode navTo INode Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call to check if the agent has found its target OR if he is not a patroller, if true, returns false for early exit. If the navTo INode returns false, calls the Run method of distanceCheck INode and returns its value. Returns false if none of the above apply. public bool Run() Returns bool"
  },
  "api/WGR.Gameplay.AI.StunedAction.html": {
    "href": "api/WGR.Gameplay.AI.StunedAction.html",
    "title": "Class StunedAction | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class StunedAction Namespace WGR.Gameplay.AI Assembly Assembly-CSharp.dll public class StunedAction : INode Inheritance object StunedAction Implements INode Constructors StunedAction(EnemyNodeData) public StunedAction(EnemyNodeData nodeData) Parameters nodeData EnemyNodeData Methods GetNodeData() Call to get the node data passed in the creation of the node. public INodeData GetNodeData() Returns INodeData Run() Call check if enough time has passed since the agent got marked as stunned. If true, set the stunned animation state, along with the enemy entity and node data stunned values to false. If the agent is still alive activate his attacking behaviour by setting the TargetFound value to true through the node data. public bool Run() Returns bool False when the time reaches 0, True when is greater than 0."
  },
  "api/WGR.Gameplay.AI.html": {
    "href": "api/WGR.Gameplay.AI.html",
    "title": "Namespace WGR.Gameplay.AI | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.Gameplay.AI Classes BossLevelEnemyCounter EnemySpawnHandler"
  },
  "api/WGR.Gameplay.BattleSystem.BloodFXController.html": {
    "href": "api/WGR.Gameplay.BattleSystem.BloodFXController.html",
    "title": "Class BloodFXController | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BloodFXController Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class BloodFXController : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BloodFXController"
  },
  "api/WGR.Gameplay.BattleSystem.Bullet.html": {
    "href": "api/WGR.Gameplay.BattleSystem.Bullet.html",
    "title": "Class Bullet | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Bullet Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class Bullet : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Bullet Methods ChangeSpeed(float) Subsrcibed to the GameEventsHandler.onBulletSpeedChange event Call to set THIS bullets' current speed. public void ChangeSpeed(float newSpeed) Parameters newSpeed float SetBulletType(BulletType) Call to set THIS bullet instances' bullet type. Bullet type of: Enemy: Collides with the player and not with AIEntities. Player: Collides with the AIEntities and not the player. public void SetBulletType(BulletType type) Parameters type BulletType"
  },
  "api/WGR.Gameplay.BattleSystem.BulletPool.html": {
    "href": "api/WGR.Gameplay.BattleSystem.BulletPool.html",
    "title": "Class BulletPool | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BulletPool Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class BulletPool : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BulletPool Methods CacheBullet(Bullet, BulletType) Call to cache the passed Bullet gameObject back to its appropriate Queue based on the bulletType. public void CacheBullet(Bullet bullet, BulletType bulletType) Parameters bullet Bullet The bullet script attached to the gameObject. bulletType BulletType GetPooledBulletByType(BulletType) Call to get a Bullet Gameobject reference based on the passed type. Returns null in case the pool is empty. public GameObject GetPooledBulletByType(BulletType bulletType) Parameters bulletType BulletType Returns GameObject"
  },
  "api/WGR.Gameplay.BattleSystem.BulletStatics.html": {
    "href": "api/WGR.Gameplay.BattleSystem.BulletStatics.html",
    "title": "Class BulletStatics | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class BulletStatics Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public static class BulletStatics Inheritance object BulletStatics Fields StopTimeSpeed public static float StopTimeSpeed Field Value float Properties CurrentSpeed When set the value passed gets passed through the GameEventHandler.OnBulletSpeedChange(...) event to update every bullet speed. public static float CurrentSpeed { get; set; } Property Value float SlowDownSpeed public static float SlowDownSpeed { get; set; } Property Value float StartingSpeed public static float StartingSpeed { get; set; } Property Value float"
  },
  "api/WGR.Gameplay.BattleSystem.BulletType.html": {
    "href": "api/WGR.Gameplay.BattleSystem.BulletType.html",
    "title": "Enum BulletType | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum BulletType Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll Every available bullet type in the game. public enum BulletType Fields Enemy = 0 Player = 1"
  },
  "api/WGR.Gameplay.BattleSystem.IShooter.html": {
    "href": "api/WGR.Gameplay.BattleSystem.IShooter.html",
    "title": "Interface IShooter | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface IShooter Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public interface IShooter Methods SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() void Shoot()"
  },
  "api/WGR.Gameplay.BattleSystem.IThrowable.html": {
    "href": "api/WGR.Gameplay.BattleSystem.IThrowable.html",
    "title": "Interface IThrowable | Wake Grind Rewind: Redefined Official API",
    "keywords": "Interface IThrowable Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll An interface that can be attached to any object we want to be throwable. Handled through polymorphism and implemented from ThrowableEntity class. public interface IThrowable Methods GetThrowSpeed() float GetThrowSpeed() Returns float InitiateThrow() void InitiateThrow() ResetSpeedAndRotation() void ResetSpeedAndRotation()"
  },
  "api/WGR.Gameplay.BattleSystem.PlayerAttack.html": {
    "href": "api/WGR.Gameplay.BattleSystem.PlayerAttack.html",
    "title": "Class PlayerAttack | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class PlayerAttack Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class PlayerAttack : Shooter, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter PlayerAttack Implements IShooter Inherited Members Shooter.meleeDetectionLayers Shooter.meleeLinecastLayers Shooter.firePoint Shooter.bulletSpreadRate Shooter.accuracyIncreaseRate Shooter.equipedWeapon Shooter.bulletsLeft Shooter.maxBulletSpread Shooter.canShoot Shooter.isShooting Shooter.shootInterval Shooter.shootDoneTime Fields IsAttackActive public bool IsAttackActive Field Value bool Methods DropEquipedWeapon() Call to transfer a weapon gameObject instance from the WeaponManager.GetWeaponByType(...) based on the equiped player weapon and place it in front of the player. Early exits if the equiped weapon is null OR is of Unarmed weaponCategory. Calls ClearWeaponsUI() public void DropEquipedWeapon() SetWeaponInfo(Weapon, int) Call to set the player weapon to the passed weapon type and values. Calls UpdateWeaponsUI(...) public override void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Leave to default when passing a non ranged weapon so the bullet count does not get printed in the UI. Used to transfer the bullets left between the equiped weapon and the picked up weapon. Shoot() Call to initiate the player specific attacking sequence. Sets isShooting to true. Changes the bullets left UI element. public override void Shoot()"
  },
  "api/WGR.Gameplay.BattleSystem.ProjectileLayers.html": {
    "href": "api/WGR.Gameplay.BattleSystem.ProjectileLayers.html",
    "title": "Enum ProjectileLayers | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum ProjectileLayers Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll The layers every bullet gameObject can exist on. public enum ProjectileLayers Fields EnemyProjectile = 13 PlayerProjectile = 12"
  },
  "api/WGR.Gameplay.BattleSystem.Shooter.html": {
    "href": "api/WGR.Gameplay.BattleSystem.Shooter.html",
    "title": "Class Shooter | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Shooter Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public abstract class Shooter : MonoBehaviour, IShooter Inheritance object Object Component Behaviour MonoBehaviour Shooter Implements IShooter Derived AIEntityWeapon PlayerAttack Fields accuracyIncreaseRate protected float accuracyIncreaseRate Field Value float bulletSpreadRate protected float bulletSpreadRate Field Value float bulletsLeft protected int bulletsLeft Field Value int canShoot protected bool canShoot Field Value bool equipedWeapon public Weapon equipedWeapon Field Value Weapon firePoint protected Transform firePoint Field Value Transform isShooting protected bool isShooting Field Value bool maxBulletSpread protected float maxBulletSpread Field Value float meleeDetectionLayers protected LayerMask meleeDetectionLayers Field Value LayerMask meleeLinecastLayers protected LayerMask meleeLinecastLayers Field Value LayerMask shootDoneTime protected float shootDoneTime Field Value float shootInterval protected float shootInterval Field Value float Methods SetWeaponInfo(Weapon, int) Call to set the required Shooter fields based on the passed Weapon Scriptable Object. cachedBulletCountMust be set only in the PlayerWeapon. public abstract void SetWeaponInfo(Weapon weapon, int cachedBulletCount = -1) Parameters weapon Weapon cachedBulletCount int Shoot() public abstract void Shoot()"
  },
  "api/WGR.Gameplay.BattleSystem.ThrowableEntity.html": {
    "href": "api/WGR.Gameplay.BattleSystem.ThrowableEntity.html",
    "title": "Class ThrowableEntity | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class ThrowableEntity Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class ThrowableEntity : MonoBehaviour, IThrowable Inheritance object Object Component Behaviour MonoBehaviour ThrowableEntity Implements IThrowable Methods GetThrowSpeed() Call to get THIS throwables throw speed. public float GetThrowSpeed() Returns float InitiateThrow() Call to start the throwing weapon sequence by setting the wasThrown to true. Sets throwTimer to throwForSeconds public void InitiateThrow() ResetSpeedAndRotation() Call to set the rotation speed to 5, and the throwSpeedCache to throwSpeed; public void ResetSpeedAndRotation()"
  },
  "api/WGR.Gameplay.BattleSystem.Weapon.html": {
    "href": "api/WGR.Gameplay.BattleSystem.Weapon.html",
    "title": "Class Weapon | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Weapon Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class Weapon : ScriptableObject Inheritance object Object ScriptableObject Weapon Fields DefaultMagazine public int DefaultMagazine Field Value int IntervalBetweenShots public float IntervalBetweenShots Field Value float MaxBulletSpread public float MaxBulletSpread Field Value float MinShootDistance public float MinShootDistance Field Value float WeaponCategory public WeaponCategory WeaponCategory Field Value WeaponCategory WeaponName public string WeaponName Field Value string WeaponSprite public Sprite WeaponSprite Field Value Sprite WeaponType public WeaponType WeaponType Field Value WeaponType gunEmptySound public GameAudioClip gunEmptySound Field Value GameAudioClip gunShootSound public GameAudioClip[] gunShootSound Field Value GameAudioClip[] weaponAmmoSprite public Sprite weaponAmmoSprite Field Value Sprite weaponEquipedSprite public Sprite weaponEquipedSprite Field Value Sprite weaponGrayedSprite public Sprite weaponGrayedSprite Field Value Sprite"
  },
  "api/WGR.Gameplay.BattleSystem.WeaponCategory.html": {
    "href": "api/WGR.Gameplay.BattleSystem.WeaponCategory.html",
    "title": "Enum WeaponCategory | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum WeaponCategory Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll Every weapon category in the game public enum WeaponCategory Fields Melee = 1 Ranged = 2 Unarmed = 0"
  },
  "api/WGR.Gameplay.BattleSystem.WeaponKillCount.html": {
    "href": "api/WGR.Gameplay.BattleSystem.WeaponKillCount.html",
    "title": "Class WeaponKillCount | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class WeaponKillCount Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class WeaponKillCount : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour WeaponKillCount Methods AddKillToWeapon(WeaponType) Call to add a kill to the passed weapon type. Weapon types are unique per weapon. public void AddKillToWeapon(WeaponType weaponType) Parameters weaponType WeaponType GetWeaponUnlockDataDict() Call to get the weapon pair dictionary. public Dictionary<WeaponType, WeaponUnlockData> GetWeaponUnlockDataDict() Returns Dictionary<WeaponType, WeaponUnlockData> IsWeaponUnlocked(WeaponType) Call to check if the passed weapon type is unlocked in the dictionary. public bool IsWeaponUnlocked(WeaponType type) Parameters type WeaponType Returns bool True if the passed weapon is unlocked, false if otherwise."
  },
  "api/WGR.Gameplay.BattleSystem.WeaponPickup.html": {
    "href": "api/WGR.Gameplay.BattleSystem.WeaponPickup.html",
    "title": "Class WeaponPickup | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class WeaponPickup Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll public class WeaponPickup : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour WeaponPickup Fields weaponData public Weapon weaponData Field Value Weapon Methods GetCachedWeaponBullets() Call to get the dropped weapon bullet count. public int GetCachedWeaponBullets() Returns int SetWeaponBullets(int) Call to set the dropped weapon bullet count. public void SetWeaponBullets(int bullets) Parameters bullets int"
  },
  "api/WGR.Gameplay.BattleSystem.WeaponType.html": {
    "href": "api/WGR.Gameplay.BattleSystem.WeaponType.html",
    "title": "Enum WeaponType | Wake Grind Rewind: Redefined Official API",
    "keywords": "Enum WeaponType Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll Every weapon type in the game public enum WeaponType Fields BaseballBat = 1 Knife = 0 Pistol = 3 Punch = 2 SemiAutomatic = 4 Shotgun = 5 _NaN = -1"
  },
  "api/WGR.Gameplay.BattleSystem.WeaponUnlockData.html": {
    "href": "api/WGR.Gameplay.BattleSystem.WeaponUnlockData.html",
    "title": "Struct WeaponUnlockData | Wake Grind Rewind: Redefined Official API",
    "keywords": "Struct WeaponUnlockData Namespace WGR.Gameplay.BattleSystem Assembly Assembly-CSharp.dll This struct is used to store weapon kill counts and weapon types tied together. public struct WeaponUnlockData Constructors WeaponUnlockData(WeaponType) public WeaponUnlockData(WeaponType type) Parameters type WeaponType Fields IsUnlocked public bool IsUnlocked Field Value bool KillCount public int KillCount Field Value int WeaponType public WeaponType WeaponType Field Value WeaponType"
  },
  "api/WGR.Gameplay.BattleSystem.html": {
    "href": "api/WGR.Gameplay.BattleSystem.html",
    "title": "Namespace WGR.Gameplay.BattleSystem | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.Gameplay.BattleSystem Classes BloodFXController Bullet BulletPool BulletStatics PlayerAttack Shooter ThrowableEntity Weapon WeaponKillCount WeaponPickup Structs WeaponUnlockData This struct is used to store weapon kill counts and weapon types tied together. Interfaces IShooter IThrowable An interface that can be attached to any object we want to be throwable. Handled through polymorphism and implemented from ThrowableEntity class. Enums BulletType Every available bullet type in the game. ProjectileLayers The layers every bullet gameObject can exist on. WeaponCategory Every weapon category in the game WeaponType Every weapon type in the game"
  },
  "api/WGR.Gameplay.LevelWinHandler.html": {
    "href": "api/WGR.Gameplay.LevelWinHandler.html",
    "title": "Class LevelWinHandler | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class LevelWinHandler Namespace WGR.Gameplay Assembly Assembly-CSharp.dll public class LevelWinHandler : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour LevelWinHandler"
  },
  "api/WGR.Gameplay.html": {
    "href": "api/WGR.Gameplay.html",
    "title": "Namespace WGR.Gameplay | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace WGR.Gameplay Classes LevelWinHandler"
  },
  "api/WGR.InspectorButtonAttribute.html": {
    "href": "api/WGR.InspectorButtonAttribute.html",
    "title": "Class InspectorButtonAttribute | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class InspectorButtonAttribute Namespace WGR Assembly Assembly-CSharp.dll This attribute can only be applied to fields because its associated PropertyDrawer only operates on fields (either public or tagged with the [SerializeField] attribute) in the target MonoBehaviour. public class InspectorButtonAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute InspectorButtonAttribute Constructors InspectorButtonAttribute(string) public InspectorButtonAttribute(string MethodName) Parameters MethodName string Fields MethodName public readonly string MethodName Field Value string kDefaultButtonWidth public static float kDefaultButtonWidth Field Value float Properties ButtonWidth public float ButtonWidth { get; set; } Property Value float"
  },
  "api/WGR.Utils.html": {
    "href": "api/WGR.Utils.html",
    "title": "Class Utils | Wake Grind Rewind: Redefined Official API",
    "keywords": "Class Utils Namespace WGR Assembly Assembly-CSharp.dll public static class Utils Inheritance object Utils Methods MissingComponent(string, object, string, int) Call to print a Debug.Warning at the Unity console public static void MissingComponent(string searchedFor, object scriptRef, string callerRef = \"\", int lineRef = 0) Parameters searchedFor string The thing you searched for scriptRef object The script in which you searched for callerRef string lineRef int"
  },
  "api/WGR.html": {
    "href": "api/WGR.html",
    "title": "Namespace | Wake Grind Rewind: Redefined Official API",
    "keywords": "Namespace Classes InspectorButtonAttribute This attribute can only be applied to fields because its associated PropertyDrawer only operates on fields (either public or tagged with the [SerializeField] attribute) in the target MonoBehaviour. Utils"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Wake Grind Rewind: Redefined Official API",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Wake Grind Rewind: Redefined Official API",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Wake Grind Rewind: Redefined Official API",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}